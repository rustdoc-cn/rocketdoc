
export default {
    'sidebar': [{ "text": "Rocket编程指南", "link": "", "pagePath": "README.md" }, { "text": "简介", "children": [{ "text": "读者", "link": "Introduction/Audience.html", "pagePath": "Introduction/Audience.md" }, { "text": "前言", "link": "Introduction/Foreword.html", "pagePath": "Introduction/Foreword.md" }] }, { "text": "快速开始", "children": [{ "text": "运行示例", "link": "Quickstart/Running-Examples.html", "pagePath": "Quickstart/Running-Examples.md" }] }, { "text": "入门", "children": [{ "text": "安装 Rust", "link": "Getting-Started/Installing-Rust.html", "pagePath": "Getting-Started/Installing-Rust.md" }, { "text": "你好，世界！", "link": "Getting-Started/Hello-World.html", "pagePath": "Getting-Started/Hello-World.md" }] }, { "text": "概述", "children": [{ "text": "生命周期", "link": "Overview/Lifecycle.html", "pagePath": "Overview/Lifecycle.md" }, { "text": "路由", "link": "Overview/Routing.html", "pagePath": "Overview/Routing.md" }, { "text": "挂载", "link": "Overview/Mounting.html", "pagePath": "Overview/Mounting.md" }, { "text": "启动", "link": "Overview/Launching.html", "pagePath": "Overview/Launching.md" }] }, { "text": "请求 Requests", "children": [{ "text": "方法", "link": "Requests/Methods.html", "pagePath": "Requests/Methods.md" }, { "text": "动态路径", "link": "Requests/Dynamic-Paths.html", "pagePath": "Requests/Dynamic-Paths.md" }, { "text": "匹配转发", "link": "Requests/Forwarding.html", "pagePath": "Requests/Forwarding.md" }, { "text": "查询字符串", "link": "Requests/Query-Strings.html", "pagePath": "Requests/Query-Strings.md" }, { "text": "请求防护", "link": "Requests/Request-Guards.html", "pagePath": "Requests/Request-Guards.md" }, { "text": "Cookies", "link": "Requests/Cookies.html", "pagePath": "Requests/Cookies.md" }, { "text": "格式", "link": "Requests/Format.html", "pagePath": "Requests/Format.md" }, { "text": "正文数据", "link": "Requests/Body-Data.html", "pagePath": "Requests/Body-Data.md" }, { "text": "你好，世界！", "link": "Requests/Error-Catchers.html", "pagePath": "Requests/Error-Catchers.md" }] }, { "text": "响应 Responses", "children": [{ "text": "响应器", "link": "Responses/Responder.html", "pagePath": "Responses/Responder.md" }, { "text": "自定义响应器", "link": "Responses/Custom-Responders.html", "pagePath": "Responses/Custom-Responders.md" }, { "text": "实现响应器", "link": "Responses/Implementations.html", "pagePath": "Responses/Implementations.md" }, { "text": "Rocket响应器", "link": "Responses/Rocket-Responders.html", "pagePath": "Responses/Rocket-Responders.md" }, { "text": "模板", "link": "Responses/Templates.html", "pagePath": "Responses/Templates.md" }, { "text": "类型化Uri", "link": "Responses/Typed-URIs.html", "pagePath": "Responses/Typed-URIs.md" }] }, { "text": "状态 State", "children": [{ "text": "管理状态", "link": "State/Managed-State.html", "pagePath": "State/Managed-State.md" }, { "text": "请求本地状态", "link": "State/Request-Local-State.html", "pagePath": "State/Request-Local-State.md" }, { "text": "数据库", "link": "State/Databases.html", "pagePath": "State/Databases.md" }] }, { "text": "整流罩 Fairings", "children": [{ "text": "概述", "link": "Fairings/Overview.html", "pagePath": "Fairings/Overview.md" }, { "text": "实现", "link": "Fairings/Implementing.html", "pagePath": "Fairings/Implementing.md" }, { "text": "临时 Fairings", "link": "Fairings/Ad-Hoc-Fairings.html", "pagePath": "Fairings/Ad-Hoc-Fairings.md" }] }, { "text": "测试", "children": [{ "text": "本地调试", "link": "Testing/Local-Dispatching.html", "pagePath": "Testing/Local-Dispatching.md" }, { "text": "验证响应", "link": "Testing/Validating-Responses.html", "pagePath": "Testing/Validating-Responses.md" }, { "text": "测试 Hello World！", "link": "Testing/Testing-Hello-World.html", "pagePath": "Testing/Testing-Hello-World.md" }, { "text": "代码生成调试", "link": "Testing/Codegen-Debug.html", "pagePath": "Testing/Codegen-Debug.md" }] }, { "text": "配置", "children": [{ "text": "环境", "link": "Configuration/Environment.html", "pagePath": "Configuration/Environment.md" }, { "text": "Rocket配置文件", "link": "Configuration/Rocket.toml.html", "pagePath": "Configuration/Rocket.toml.md" }, { "text": "数据限制", "link": "Configuration/Data-Limits.html", "pagePath": "Configuration/Data-Limits.md" }, { "text": "附加功能", "link": "Configuration/Extras.html", "pagePath": "Configuration/Extras.md" }, { "text": "环境变量", "link": "Configuration/Environment-Variables.html", "pagePath": "Configuration/Environment-Variables.md" }, { "text": "程式化", "link": "Configuration/Programmatic.html", "pagePath": "Configuration/Programmatic.md" }, { "text": "配置TLS", "link": "Configuration/Configuring-TLS.html", "pagePath": "Configuration/Configuring-TLS.md" }] }, { "text": "Pastebin 教程", "children": [{ "text": "成品", "link": "Pastebin/Finished-Product.html", "pagePath": "Pastebin/Finished-Product.md" }, { "text": "入门", "link": "Pastebin/Getting-Started.html", "pagePath": "Pastebin/Getting-Started.md" }, { "text": "主页", "link": "Pastebin/Index.html", "pagePath": "Pastebin/Index.md" }, { "text": "上传", "link": "Pastebin/Uploading.html", "pagePath": "Pastebin/Uploading.md" }, { "text": "检索粘贴", "link": "Pastebin/Retrieving-Pastes.html", "pagePath": "Pastebin/Retrieving-Pastes.md" }, { "text": "总结", "link": "Pastebin/Conclusion.html", "pagePath": "Pastebin/Conclusion.md" }] }, { "text": "总结", "children": [{ "text": "获取帮助", "link": "Conclusion/Getting-Help.html", "pagePath": "Conclusion/Getting-Help.md" }, { "text": "下一步是什么？", "link": "Conclusion/Whats-Next.html", "pagePath": "Conclusion/Whats-Next.md" }] }],
    'prev': { "text": "上传", "link": "Pastebin/Uploading.html", "pagePath": "Pastebin/Uploading.md" },
    'next': { "text": "总结", "link": "Pastebin/Conclusion.html", "pagePath": "Pastebin/Conclusion.md" },
    'config': { "srcDir": "source/_posts", "outDir": "dist", "exclude": ["**/.*", "markdoc.config.json", "LICENSE", "dist"], "baseDir": "/rocketdoc/", "watch": false, "serve": true, "addr": "127.0.0.1:8096", "title": "ROCKET指南", "nav": [{ "text": "首页", "link": "" }], "sidebar": ["README.md", { "text": "简介", "children": ["Introduction/Audience.md", "Introduction/Foreword.md"] }, { "text": "快速开始", "children": ["Quickstart/Running-Examples.md"] }, { "text": "入门", "children": ["Getting-Started/Installing-Rust.md", "Getting-Started/Hello-World.md"] }, { "text": "概述", "children": ["Overview/Lifecycle.md", "Overview/Routing.md", "Overview/Mounting.md", "Overview/Launching.md"] }, { "text": "请求 Requests", "children": ["Requests/Methods.md", "Requests/Dynamic-Paths.md", "Requests/Forwarding.md", "Requests/Query-Strings.md", "Requests/Request-Guards.md", "Requests/Cookies.md", "Requests/Format.md", "Requests/Body-Data.md", "Requests/Error-Catchers.md"] }, { "text": "响应 Responses", "children": ["Responses/Responder.md", "Responses/Custom-Responders.md", "Responses/Implementations.md", "Responses/Rocket-Responders.md", "Responses/Templates.md", "Responses/Typed-URIs.md"] }, { "text": "状态 State", "children": ["State/Managed-State.md", "State/Request-Local-State.md", "State/Databases.md"] }, { "text": "整流罩 Fairings", "children": ["Fairings/Overview.md", "Fairings/Implementing.md", "Fairings/Ad-Hoc-Fairings.md"] }, { "text": "测试", "children": ["Testing/Local-Dispatching.md", "Testing/Validating-Responses.md", "Testing/Testing-Hello-World.md", "Testing/Codegen-Debug.md"] }, { "text": "配置", "children": ["Configuration/Environment.md", "Configuration/Rocket.toml.md", "Configuration/Data-Limits.md", "Configuration/Extras.md", "Configuration/Environment-Variables.md", "Configuration/Programmatic.md", "Configuration/Configuring-TLS.md"] }, { "text": "Pastebin 教程", "children": ["Pastebin/Finished-Product.md", "Pastebin/Getting-Started.md", "Pastebin/Index.md", "Pastebin/Uploading.md", "Pastebin/Retrieving-Pastes.md", "Pastebin/Conclusion.md"] }, { "text": "总结", "children": ["Conclusion/Getting-Help.md", "Conclusion/Whats-Next.md"] }] },
    'pagePath': "Pastebin/Retrieving-Pastes.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "Pastebin/Retrieving-Pastes.html",
    'title': "检索粘贴",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="检索粘贴">检索粘贴<a class="anchor" href="Pastebin/Retrieving-Pastes.html#检索粘贴">§</a></h2>\n<p>最后一步是创建<code>retrieve</code>路径，给定一个<code>&lt;id&gt;</code>，将返回相应的粘贴（如果存在）。</p>\n<p>这是实现此<code>retrieve</code>路线的第一步。下面的路由将一个<code>&lt;id&gt;</code>作为动态路径元素。处理程序使用<code>id</code>来构造到内部粘贴的路径<code>upload/</code>，然后尝试在该路径下打开文件，并选择<code>File</code>是否存在（如果存在）。Rocket将<code>None</code> <a href="https://api.rocket.rs/v0.4/rocket/response/trait.Responder.html#provided-implementations">响应器</a>视为<strong>404</strong>错误，这正是我们要在不存在请求的粘贴时返回的错误。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span>File<span class="token punctuation">;</span>\n<span class="token keyword">use</span> rocket<span class="token punctuation">::</span>http<span class="token punctuation">::</span>RawStr<span class="token punctuation">;</span>\n\n<span class="token attribute attr-name">#[get(<span class="token string">"/&lt;id>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">retrieve</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token operator">&amp;</span>RawStr<span class="token punctuation">)</span> <span class="token punctuation">-></span> Option<span class="token operator">&lt;</span>File<span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> filename <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"upload/{id}"</span><span class="token punctuation">,</span> id <span class="token operator">=</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    File<span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>确保路由已挂载在根路径上：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    rocket<span class="token punctuation">::</span><span class="token function">ignite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token macro property">routes!</span><span class="token punctuation">[</span>index<span class="token punctuation">,</span> upload<span class="token punctuation">,</span> retrieve<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>不幸的是，这段代码有问题。您能发现问题吗？该<a href="https://api.rocket.rs/v0.4/rocket/http/struct.RawStr.html"><code>RawStr</code></a>类型应该提醒你的！</p>\n<p>问题是，用户控制 <code>id</code>的值，因此，可以强制服务在 <code>upload/</code> 中打开不打算打开的文件。例如，假设您稍后决定一个特殊的文件 <code>upload/_credentials.txt</code> 将存储一些重要的私有信息。如果用户向 <code>/_credentials.txt</code>发出 <code>GET</code> 请求，服务器将读取并返回  <code>upload/_credentials.txt</code>文件，从而泄漏敏感信息。这是一个大问题；它被称为全路径泄漏攻击，而Rocket提供了防止这种和其他类型攻击发生的工具。</p>\n<p>为了防止攻击，我们需要在使用前进行<em>验证</em> <code>id</code>。由于<code>id</code>是动态参数，因此我们可以使用Rocket的<a href="https://api.rocket.rs/v0.4/rocket/request/trait.FromParam.html">FromParam</a>特性来执行验证，并在使用前确保验证<code>id</code>有效<code>PasteID</code>。我我们通过在<code>src/paste-id.rs</code>中为<code>PasteID</code>实现<code>FromParam</code>来实现，如下所示：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> rocket<span class="token punctuation">::</span>request<span class="token punctuation">::</span>FromParam<span class="token punctuation">;</span>\n\n<span class="token comment">/// Returns `true` if `id` is a valid paste ID and `false` otherwise.</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">valid_id</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token operator">&amp;</span>str<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">{</span>\n    id<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>c<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>\n        <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token char string">\'a\'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char string">\'z\'</span><span class="token punctuation">)</span>\n            <span class="token operator">||</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token char string">\'A\'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char string">\'Z\'</span><span class="token punctuation">)</span>\n            <span class="token operator">||</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token char string">\'0\'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char string">\'9\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/// Returns an instance of `PasteID` if the path segment is a valid ID.</span>\n<span class="token comment">/// Otherwise returns the invalid ID as the `Err` value.</span>\n<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'a</span><span class="token operator">></span> FromParam<span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'a</span><span class="token operator">></span> <span class="token keyword">for</span> PasteID<span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'a</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">type</span> Error <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">\'a</span> RawStr<span class="token punctuation">;</span>\n\n    <span class="token keyword">fn</span> <span class="token function-definition function">from_param</span><span class="token punctuation">(</span>param<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">\'a</span> RawStr<span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>PasteID<span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'a</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">\'a</span> RawStr<span class="token operator">></span> <span class="token punctuation">{</span>\n        <span class="token keyword">match</span> <span class="token function">valid_id</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token boolean">true</span> <span class="token operator">=></span> Ok<span class="token punctuation">(</span>PasteID<span class="token punctuation">(</span>Cow<span class="token punctuation">::</span>Borrowed<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token boolean">false</span> <span class="token operator">=></span> Err<span class="token punctuation">(</span>param<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>然后，我们只需要将处理程序中的<code>id</code>类型更改为<code>PasteID</code>。然后，Rocket将确保<code>&lt;id&gt;</code>在调用检索路由之前表示有效的<code>PasteID</code>，从而防止对检索路由的攻击：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/&lt;id>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">retrieve</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> PasteID<span class="token punctuation">)</span> <span class="token punctuation">-></span> Option<span class="token operator">&lt;</span>File<span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> filename <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"upload/{id}"</span><span class="token punctuation">,</span> id <span class="token operator">=</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    File<span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>请注意，我们的<code>valid_id</code>功能过于简单，可以通过例如检查的长度<code>id</code>是否在某些已知范围内或根据需要将敏感文件列入黑名单来加以改进。</p>\n<p>使用<code>FromParam</code>和其他火箭特性的妙处在于它们集中了策略。例如，在这里，我们已经将有效<code>PasteID</code>s 的策略集中在动态参数中。在将来的任何时候，如果添加了其他需要使用的路由<code>PasteID</code>，则无需做进一步的工作：只需在签名中使用该类型，Rocket就会处理其余的工作。</p>'
        } }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "index.js" })),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="Pastebin/Retrieving-Pastes.html#检索粘贴">检索粘贴</a></li></ol></nav>'
        } }),
    'layout': "default",
    'id': "Retrieving-Pastes"
};
