
export default {
    'sidebar': [{ "text": "Rocket编程指南", "link": "", "pagePath": "README.md" }, { "text": "简介", "children": [{ "text": "读者", "link": "Introduction/Audience.html", "pagePath": "Introduction/Audience.md" }, { "text": "前言", "link": "Introduction/Foreword.html", "pagePath": "Introduction/Foreword.md" }] }, { "text": "快速开始", "children": [{ "text": "运行示例", "link": "Quickstart/Running-Examples.html", "pagePath": "Quickstart/Running-Examples.md" }] }, { "text": "入门", "children": [{ "text": "安装 Rust", "link": "Getting-Started/Installing-Rust.html", "pagePath": "Getting-Started/Installing-Rust.md" }, { "text": "你好，世界！", "link": "Getting-Started/Hello-World.html", "pagePath": "Getting-Started/Hello-World.md" }] }, { "text": "概述", "children": [{ "text": "生命周期", "link": "Overview/Lifecycle.html", "pagePath": "Overview/Lifecycle.md" }, { "text": "路由", "link": "Overview/Routing.html", "pagePath": "Overview/Routing.md" }, { "text": "挂载", "link": "Overview/Mounting.html", "pagePath": "Overview/Mounting.md" }, { "text": "启动", "link": "Overview/Launching.html", "pagePath": "Overview/Launching.md" }] }, { "text": "请求 Requests", "children": [{ "text": "方法", "link": "Requests/Methods.html", "pagePath": "Requests/Methods.md" }, { "text": "动态路径", "link": "Requests/Dynamic-Paths.html", "pagePath": "Requests/Dynamic-Paths.md" }, { "text": "匹配转发", "link": "Requests/Forwarding.html", "pagePath": "Requests/Forwarding.md" }, { "text": "查询字符串", "link": "Requests/Query-Strings.html", "pagePath": "Requests/Query-Strings.md" }, { "text": "请求防护", "link": "Requests/Request-Guards.html", "pagePath": "Requests/Request-Guards.md" }, { "text": "Cookies", "link": "Requests/Cookies.html", "pagePath": "Requests/Cookies.md" }, { "text": "格式", "link": "Requests/Format.html", "pagePath": "Requests/Format.md" }, { "text": "正文数据", "link": "Requests/Body-Data.html", "pagePath": "Requests/Body-Data.md" }, { "text": "你好，世界！", "link": "Requests/Error-Catchers.html", "pagePath": "Requests/Error-Catchers.md" }] }, { "text": "响应 Responses", "children": [{ "text": "响应器", "link": "Responses/Responder.html", "pagePath": "Responses/Responder.md" }, { "text": "自定义响应器", "link": "Responses/Custom-Responders.html", "pagePath": "Responses/Custom-Responders.md" }, { "text": "实现响应器", "link": "Responses/Implementations.html", "pagePath": "Responses/Implementations.md" }, { "text": "Rocket响应器", "link": "Responses/Rocket-Responders.html", "pagePath": "Responses/Rocket-Responders.md" }, { "text": "模板", "link": "Responses/Templates.html", "pagePath": "Responses/Templates.md" }, { "text": "类型化Uri", "link": "Responses/Typed-URIs.html", "pagePath": "Responses/Typed-URIs.md" }] }, { "text": "状态 State", "children": [{ "text": "管理状态", "link": "State/Managed-State.html", "pagePath": "State/Managed-State.md" }, { "text": "请求本地状态", "link": "State/Request-Local-State.html", "pagePath": "State/Request-Local-State.md" }, { "text": "数据库", "link": "State/Databases.html", "pagePath": "State/Databases.md" }] }, { "text": "整流罩 Fairings", "children": [{ "text": "概述", "link": "Fairings/Overview.html", "pagePath": "Fairings/Overview.md" }, { "text": "实现", "link": "Fairings/Implementing.html", "pagePath": "Fairings/Implementing.md" }, { "text": "临时 Fairings", "link": "Fairings/Ad-Hoc-Fairings.html", "pagePath": "Fairings/Ad-Hoc-Fairings.md" }] }, { "text": "测试", "children": [{ "text": "本地调试", "link": "Testing/Local-Dispatching.html", "pagePath": "Testing/Local-Dispatching.md" }, { "text": "验证响应", "link": "Testing/Validating-Responses.html", "pagePath": "Testing/Validating-Responses.md" }, { "text": "测试 Hello World！", "link": "Testing/Testing-Hello-World.html", "pagePath": "Testing/Testing-Hello-World.md" }, { "text": "代码生成调试", "link": "Testing/Codegen-Debug.html", "pagePath": "Testing/Codegen-Debug.md" }] }, { "text": "配置", "children": [{ "text": "环境", "link": "Configuration/Environment.html", "pagePath": "Configuration/Environment.md" }, { "text": "Rocket配置文件", "link": "Configuration/Rocket.toml.html", "pagePath": "Configuration/Rocket.toml.md" }, { "text": "数据限制", "link": "Configuration/Data-Limits.html", "pagePath": "Configuration/Data-Limits.md" }, { "text": "附加功能", "link": "Configuration/Extras.html", "pagePath": "Configuration/Extras.md" }, { "text": "环境变量", "link": "Configuration/Environment-Variables.html", "pagePath": "Configuration/Environment-Variables.md" }, { "text": "程式化", "link": "Configuration/Programmatic.html", "pagePath": "Configuration/Programmatic.md" }, { "text": "配置TLS", "link": "Configuration/Configuring-TLS.html", "pagePath": "Configuration/Configuring-TLS.md" }] }, { "text": "Pastebin 教程", "children": [{ "text": "成品", "link": "Pastebin/Finished-Product.html", "pagePath": "Pastebin/Finished-Product.md" }, { "text": "入门", "link": "Pastebin/Getting-Started.html", "pagePath": "Pastebin/Getting-Started.md" }, { "text": "主页", "link": "Pastebin/Index.html", "pagePath": "Pastebin/Index.md" }, { "text": "上传", "link": "Pastebin/Uploading.html", "pagePath": "Pastebin/Uploading.md" }, { "text": "检索粘贴", "link": "Pastebin/Retrieving-Pastes.html", "pagePath": "Pastebin/Retrieving-Pastes.md" }, { "text": "总结", "link": "Pastebin/Conclusion.html", "pagePath": "Pastebin/Conclusion.md" }] }, { "text": "总结", "children": [{ "text": "获取帮助", "link": "Conclusion/Getting-Help.html", "pagePath": "Conclusion/Getting-Help.md" }, { "text": "下一步是什么？", "link": "Conclusion/Whats-Next.html", "pagePath": "Conclusion/Whats-Next.md" }] }],
    'prev': { "text": "主页", "link": "Pastebin/Index.html", "pagePath": "Pastebin/Index.md" },
    'next': { "text": "检索粘贴", "link": "Pastebin/Retrieving-Pastes.html", "pagePath": "Pastebin/Retrieving-Pastes.md" },
    'config': { "srcDir": "source/_posts", "outDir": "dist", "exclude": ["**/.*", "markdoc.config.json", "LICENSE", "dist"], "baseDir": "/rocketdoc/", "watch": false, "serve": true, "addr": "127.0.0.1:8096", "title": "ROCKET指南", "nav": [{ "text": "首页", "link": "" }], "sidebar": ["README.md", { "text": "简介", "children": ["Introduction/Audience.md", "Introduction/Foreword.md"] }, { "text": "快速开始", "children": ["Quickstart/Running-Examples.md"] }, { "text": "入门", "children": ["Getting-Started/Installing-Rust.md", "Getting-Started/Hello-World.md"] }, { "text": "概述", "children": ["Overview/Lifecycle.md", "Overview/Routing.md", "Overview/Mounting.md", "Overview/Launching.md"] }, { "text": "请求 Requests", "children": ["Requests/Methods.md", "Requests/Dynamic-Paths.md", "Requests/Forwarding.md", "Requests/Query-Strings.md", "Requests/Request-Guards.md", "Requests/Cookies.md", "Requests/Format.md", "Requests/Body-Data.md", "Requests/Error-Catchers.md"] }, { "text": "响应 Responses", "children": ["Responses/Responder.md", "Responses/Custom-Responders.md", "Responses/Implementations.md", "Responses/Rocket-Responders.md", "Responses/Templates.md", "Responses/Typed-URIs.md"] }, { "text": "状态 State", "children": ["State/Managed-State.md", "State/Request-Local-State.md", "State/Databases.md"] }, { "text": "整流罩 Fairings", "children": ["Fairings/Overview.md", "Fairings/Implementing.md", "Fairings/Ad-Hoc-Fairings.md"] }, { "text": "测试", "children": ["Testing/Local-Dispatching.md", "Testing/Validating-Responses.md", "Testing/Testing-Hello-World.md", "Testing/Codegen-Debug.md"] }, { "text": "配置", "children": ["Configuration/Environment.md", "Configuration/Rocket.toml.md", "Configuration/Data-Limits.md", "Configuration/Extras.md", "Configuration/Environment-Variables.md", "Configuration/Programmatic.md", "Configuration/Configuring-TLS.md"] }, { "text": "Pastebin 教程", "children": ["Pastebin/Finished-Product.md", "Pastebin/Getting-Started.md", "Pastebin/Index.md", "Pastebin/Uploading.md", "Pastebin/Retrieving-Pastes.md", "Pastebin/Conclusion.md"] }, { "text": "总结", "children": ["Conclusion/Getting-Help.md", "Conclusion/Whats-Next.md"] }] },
    'pagePath': "Pastebin/Uploading.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "Pastebin/Uploading.html",
    'title': "上传",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="上传">上传<a class="anchor" href="Pastebin/Uploading.html#上传">§</a></h2>\n<p>您可能会想到，pastebin最复杂的方面是处理上传请求。当用户尝试上传pastebin时，我们的服务需要为上传生成唯一的ID，读取数据，将其写到文件或数据库中，然后返回带有该ID的URL。从生成ID开始，我们将一步一步地完成每个步骤。</p>\n<h4 id="唯一id">唯一ID<a class="anchor" href="Pastebin/Uploading.html#唯一id">§</a></h4>\n<p>生成唯一且有用的ID是一个有趣的话题，但这超出了本教程的范围。相反，我们仅提供<code>PasteID</code>表示<em>可能</em>唯一ID 的结构的代码。通读代码，然后将其复制/粘贴到目录中命名的新文件<code>paste_id.rs</code>中<code>src/</code>：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">::</span>fmt<span class="token punctuation">;</span>\n<span class="token keyword">use</span> std<span class="token punctuation">::</span>borrow<span class="token punctuation">::</span>Cow<span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> rand<span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> Rng<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">/// Table to retrieve base62 values from.</span>\n<span class="token keyword">const</span> BASE62<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">b"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</span><span class="token punctuation">;</span>\n\n<span class="token comment">/// A _probably_ unique paste ID.</span>\n<span class="token keyword">pub</span> <span class="token keyword">struct</span> PasteID<span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'a</span><span class="token operator">></span><span class="token punctuation">(</span>Cow<span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'a</span><span class="token punctuation">,</span> str<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'a</span><span class="token operator">></span> PasteID<span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'a</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token comment">/// Generate a _probably_ unique ID with `size` characters. For readability,</span>\n    <span class="token comment">/// the characters used are from the sets [0-9], [A-Z], [a-z]. The</span>\n    <span class="token comment">/// probability of a collision depends on the value of `size` and the number</span>\n    <span class="token comment">/// of IDs generated thus far.</span>\n    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> PasteID<span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'static</span><span class="token operator">></span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> id <span class="token operator">=</span> String<span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> rand<span class="token punctuation">::</span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>size <span class="token punctuation">{</span>\n            id<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>BASE62<span class="token punctuation">[</span>rng<span class="token punctuation">.</span>gen<span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">62</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        PasteID<span class="token punctuation">(</span>Cow<span class="token punctuation">::</span>Owned<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'a</span><span class="token operator">></span> fmt<span class="token punctuation">::</span>Display <span class="token keyword">for</span> PasteID<span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'a</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> fmt<span class="token punctuation">::</span>Formatter<span class="token punctuation">)</span> <span class="token punctuation">-></span> fmt<span class="token punctuation">::</span>Result <span class="token punctuation">{</span>\n        <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"{}"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>然后，在<code>src/main.rs</code>中添加以下内容<code>extern crate rocket</code>：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">extern</span> <span class="token keyword">crate</span> rand<span class="token punctuation">;</span>\n\n<span class="token keyword">mod</span> paste_id<span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> paste_id<span class="token punctuation">::</span>PasteID<span class="token punctuation">;</span>\n</code></pre>\n<p>最后，将<code>rand</code>板条箱的依赖项添加到<code>Cargo.toml</code>文件中：</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token punctuation">[</span>dependencies<span class="token punctuation">]</span>\n# existing Rocket dependencies<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\nrand <span class="token operator">=</span> <span class="token string">"0.6"</span>\n</code></pre>\n<p>然后，确保您的应用程序使用新代码进行构建：</p>\n<pre class="language-autoit"><code class="language-autoit">cargo build\n</code></pre>\n<p>对于我们添加的新代码，您可能会看到许多 &quot;unused&quot;的警告：这是可以预期的。我们将很快使用新代码。</p>\n<h3 id="数据处理">数据处理<a class="anchor" href="Pastebin/Uploading.html#数据处理">§</a></h3>\n<p>信不信由你，困难的部分已经完成！（<em>哇！</em>）。</p>\n<p>要处理上传，我们需要一个地方来存储上传的文件。为简化起见，我们将上传的文件存储在名为的目录中<code>upload/</code>。在<code>upload</code>目录旁边创建一个<code>src</code>目录：</p>\n<pre class="language-shell"><code class="language-shell"><span class="token function">mkdir</span> upload\n</code></pre>\n<p>对于<code>upload</code>路线，我们需要<code>use</code>一些项目：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">::</span>io<span class="token punctuation">;</span>\n<span class="token keyword">use</span> std<span class="token punctuation">::</span>path<span class="token punctuation">::</span>Path<span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> rocket<span class="token punctuation">::</span>Data<span class="token punctuation">;</span>\n<span class="token keyword">use</span> rocket<span class="token punctuation">::</span>http<span class="token punctuation">::</span>RawStr<span class="token punctuation">;</span>\n</code></pre>\n<p>该<a href="https://api.rocket.rs/v0.4/rocket/data/struct.Data.html">数据</a>结构是关键的位置：它代表一个未打开的流以传入请求正文数据。我们将使用它来将传入的请求有效地流式传输到文件。</p>\n<h3 id="上传路径">上传路径<a class="anchor" href="Pastebin/Uploading.html#上传路径">§</a></h3>\n<p>我们终于准备好编写<code>upload</code>路线了。在我们向您展示代码之前，您应该尝试自己编写路由。这是一个提示：可能的路由和处理程序签名如下所示：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[post(<span class="token string">"/"</span>, data = <span class="token string">"&lt;paste>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">upload</span><span class="token punctuation">(</span>paste<span class="token punctuation">:</span> Data<span class="token punctuation">)</span> <span class="token punctuation">-></span> io<span class="token punctuation">::</span>Result<span class="token operator">&lt;</span>String<span class="token operator">></span>\n</code></pre>\n<p>您的代码应：</p>\n<ol>\n<li>创建<code>PasteID</code>您选择的新长度。</li>\n<li>在<code>upload/</code>给定的内部构造一个文件名<code>PasteID</code>。</li>\n<li>将传输<code>Data</code>到具有构造文件名的文件。</li>\n<li>根据构造URL <code>PasteID</code>。</li>\n<li>将URL返回给客户端。</li>\n</ol>\n<p>这是我们的版本（在中<code>src/main.rs</code>）</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[post(<span class="token string">"/"</span>, data = <span class="token string">"&lt;paste>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">upload</span><span class="token punctuation">(</span>paste<span class="token punctuation">:</span> Data<span class="token punctuation">)</span> <span class="token punctuation">-></span> io<span class="token punctuation">::</span>Result<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> id <span class="token operator">=</span> PasteID<span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> filename <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"upload/{id}"</span><span class="token punctuation">,</span> id <span class="token operator">=</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"{host}/{id}\n"</span><span class="token punctuation">,</span> host <span class="token operator">=</span> <span class="token string">"<a class="token url-link" href="http://localhost:8000">http://localhost:8000</a>"</span><span class="token punctuation">,</span> id <span class="token operator">=</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Write the paste out to the file and return the URL.</span>\n    paste<span class="token punctuation">.</span><span class="token function">stream_to_file</span><span class="token punctuation">(</span>Path<span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    Ok<span class="token punctuation">(</span>url<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>确保路由已挂载在根路径上：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    rocket<span class="token punctuation">::</span><span class="token function">ignite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token macro property">routes!</span><span class="token punctuation">[</span>index<span class="token punctuation">,</span> upload<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>测试您的路线可通过行驶<code>cargo run</code>。在另一个终端上，使用上载文件<code>curl</code>。然后，验证文件是否已<code>upload</code>使用正确的ID 保存到目录中：</p>\n<pre class="language-shell"><code class="language-shell"><span class="token comment"># in the project root</span>\ncargo run\n\n<span class="token comment"># in a seperate terminal</span>\n<span class="token builtin class-name">echo</span> <span class="token string">"Hello, world."</span> <span class="token operator">|</span> <span class="token function">curl</span> --data-binary @- <a class="token url-link" href="http://localhost:8000">http://localhost:8000</a>\n<span class="token comment"># => <a class="token url-link" href="http://localhost:8000/eGs">http://localhost:8000/eGs</a></span>\n\n<span class="token comment"># back to the terminal running the pastebin</span>\n<span class="token operator">&lt;</span>ctrl-c<span class="token operator">></span>     <span class="token comment"># kill running process</span>\n<span class="token function">ls</span> upload    <span class="token comment"># ensure the upload is there</span>\n<span class="token function">cat</span> upload/* <span class="token comment"># ensure that contents are correct</span>\n</code></pre>\n<p>请注意，由于我们尚未创建<code>GET /</code>路线，因此访问返回的URL将导致<strong>404</strong>。我们现在将修复它。</p>'
        } }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "index.js" })),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="Pastebin/Uploading.html#上传">上传</a><ol><li><a href="Pastebin/Uploading.html#数据处理">数据处理</a></li><li><a href="Pastebin/Uploading.html#上传路径">上传路径</a></li></ol></li></ol></nav>'
        } }),
    'layout': "default",
    'id': "Uploading"
};
