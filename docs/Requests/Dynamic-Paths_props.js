
export default {
    'sidebar': [{ "text": "Rocket编程指南", "link": "", "pagePath": "README.md" }, { "text": "简介", "children": [{ "text": "读者", "link": "Introduction/Audience.html", "pagePath": "Introduction/Audience.md" }, { "text": "前言", "link": "Introduction/Foreword.html", "pagePath": "Introduction/Foreword.md" }] }, { "text": "快速开始", "children": [{ "text": "运行示例", "link": "Quickstart/Running-Examples.html", "pagePath": "Quickstart/Running-Examples.md" }] }, { "text": "入门", "children": [{ "text": "安装 Rust", "link": "Getting-Started/Installing-Rust.html", "pagePath": "Getting-Started/Installing-Rust.md" }, { "text": "你好，世界！", "link": "Getting-Started/Hello-World.html", "pagePath": "Getting-Started/Hello-World.md" }] }, { "text": "概述", "children": [{ "text": "生命周期", "link": "Overview/Lifecycle.html", "pagePath": "Overview/Lifecycle.md" }, { "text": "路由", "link": "Overview/Routing.html", "pagePath": "Overview/Routing.md" }, { "text": "挂载", "link": "Overview/Mounting.html", "pagePath": "Overview/Mounting.md" }, { "text": "启动", "link": "Overview/Launching.html", "pagePath": "Overview/Launching.md" }] }, { "text": "请求 Requests", "children": [{ "text": "方法", "link": "Requests/Methods.html", "pagePath": "Requests/Methods.md" }, { "text": "动态路径", "link": "Requests/Dynamic-Paths.html", "pagePath": "Requests/Dynamic-Paths.md" }, { "text": "匹配转发", "link": "Requests/Forwarding.html", "pagePath": "Requests/Forwarding.md" }, { "text": "查询字符串", "link": "Requests/Query-Strings.html", "pagePath": "Requests/Query-Strings.md" }, { "text": "请求防护", "link": "Requests/Request-Guards.html", "pagePath": "Requests/Request-Guards.md" }, { "text": "Cookies", "link": "Requests/Cookies.html", "pagePath": "Requests/Cookies.md" }, { "text": "格式", "link": "Requests/Format.html", "pagePath": "Requests/Format.md" }, { "text": "正文数据", "link": "Requests/Body-Data.html", "pagePath": "Requests/Body-Data.md" }, { "text": "你好，世界！", "link": "Requests/Error-Catchers.html", "pagePath": "Requests/Error-Catchers.md" }] }, { "text": "响应 Responses", "children": [{ "text": "响应器", "link": "Responses/Responder.html", "pagePath": "Responses/Responder.md" }, { "text": "自定义响应器", "link": "Responses/Custom-Responders.html", "pagePath": "Responses/Custom-Responders.md" }, { "text": "实现响应器", "link": "Responses/Implementations.html", "pagePath": "Responses/Implementations.md" }, { "text": "Rocket响应器", "link": "Responses/Rocket-Responders.html", "pagePath": "Responses/Rocket-Responders.md" }, { "text": "模板", "link": "Responses/Templates.html", "pagePath": "Responses/Templates.md" }, { "text": "类型化Uri", "link": "Responses/Typed-URIs.html", "pagePath": "Responses/Typed-URIs.md" }] }, { "text": "状态 State", "children": [{ "text": "管理状态", "link": "State/Managed-State.html", "pagePath": "State/Managed-State.md" }, { "text": "请求本地状态", "link": "State/Request-Local-State.html", "pagePath": "State/Request-Local-State.md" }, { "text": "数据库", "link": "State/Databases.html", "pagePath": "State/Databases.md" }] }, { "text": "整流罩 Fairings", "children": [{ "text": "概述", "link": "Fairings/Overview.html", "pagePath": "Fairings/Overview.md" }, { "text": "实现", "link": "Fairings/Implementing.html", "pagePath": "Fairings/Implementing.md" }, { "text": "临时 Fairings", "link": "Fairings/Ad-Hoc-Fairings.html", "pagePath": "Fairings/Ad-Hoc-Fairings.md" }] }, { "text": "测试", "children": [{ "text": "本地调试", "link": "Testing/Local-Dispatching.html", "pagePath": "Testing/Local-Dispatching.md" }, { "text": "验证响应", "link": "Testing/Validating-Responses.html", "pagePath": "Testing/Validating-Responses.md" }, { "text": "测试 Hello World！", "link": "Testing/Testing-Hello-World.html", "pagePath": "Testing/Testing-Hello-World.md" }, { "text": "代码生成调试", "link": "Testing/Codegen-Debug.html", "pagePath": "Testing/Codegen-Debug.md" }] }, { "text": "配置", "children": [{ "text": "环境", "link": "Configuration/Environment.html", "pagePath": "Configuration/Environment.md" }, { "text": "Rocket配置文件", "link": "Configuration/Rocket.toml.html", "pagePath": "Configuration/Rocket.toml.md" }, { "text": "数据限制", "link": "Configuration/Data-Limits.html", "pagePath": "Configuration/Data-Limits.md" }, { "text": "附加功能", "link": "Configuration/Extras.html", "pagePath": "Configuration/Extras.md" }, { "text": "环境变量", "link": "Configuration/Environment-Variables.html", "pagePath": "Configuration/Environment-Variables.md" }, { "text": "程式化", "link": "Configuration/Programmatic.html", "pagePath": "Configuration/Programmatic.md" }, { "text": "配置TLS", "link": "Configuration/Configuring-TLS.html", "pagePath": "Configuration/Configuring-TLS.md" }] }, { "text": "Pastebin 教程", "children": [{ "text": "成品", "link": "Pastebin/Finished-Product.html", "pagePath": "Pastebin/Finished-Product.md" }, { "text": "入门", "link": "Pastebin/Getting-Started.html", "pagePath": "Pastebin/Getting-Started.md" }, { "text": "主页", "link": "Pastebin/Index.html", "pagePath": "Pastebin/Index.md" }, { "text": "上传", "link": "Pastebin/Uploading.html", "pagePath": "Pastebin/Uploading.md" }, { "text": "检索粘贴", "link": "Pastebin/Retrieving-Pastes.html", "pagePath": "Pastebin/Retrieving-Pastes.md" }, { "text": "总结", "link": "Pastebin/Conclusion.html", "pagePath": "Pastebin/Conclusion.md" }] }, { "text": "总结", "children": [{ "text": "获取帮助", "link": "Conclusion/Getting-Help.html", "pagePath": "Conclusion/Getting-Help.md" }, { "text": "下一步是什么？", "link": "Conclusion/Whats-Next.html", "pagePath": "Conclusion/Whats-Next.md" }] }],
    'prev': { "text": "方法", "link": "Requests/Methods.html", "pagePath": "Requests/Methods.md" },
    'next': { "text": "匹配转发", "link": "Requests/Forwarding.html", "pagePath": "Requests/Forwarding.md" },
    'config': { "srcDir": "source/_posts", "outDir": "dist", "exclude": ["**/.*", "markdoc.config.json", "LICENSE", "dist"], "baseDir": "/rocketdoc/", "watch": false, "serve": true, "addr": "127.0.0.1:8096", "title": "ROCKET指南", "nav": [{ "text": "首页", "link": "" }], "sidebar": ["README.md", { "text": "简介", "children": ["Introduction/Audience.md", "Introduction/Foreword.md"] }, { "text": "快速开始", "children": ["Quickstart/Running-Examples.md"] }, { "text": "入门", "children": ["Getting-Started/Installing-Rust.md", "Getting-Started/Hello-World.md"] }, { "text": "概述", "children": ["Overview/Lifecycle.md", "Overview/Routing.md", "Overview/Mounting.md", "Overview/Launching.md"] }, { "text": "请求 Requests", "children": ["Requests/Methods.md", "Requests/Dynamic-Paths.md", "Requests/Forwarding.md", "Requests/Query-Strings.md", "Requests/Request-Guards.md", "Requests/Cookies.md", "Requests/Format.md", "Requests/Body-Data.md", "Requests/Error-Catchers.md"] }, { "text": "响应 Responses", "children": ["Responses/Responder.md", "Responses/Custom-Responders.md", "Responses/Implementations.md", "Responses/Rocket-Responders.md", "Responses/Templates.md", "Responses/Typed-URIs.md"] }, { "text": "状态 State", "children": ["State/Managed-State.md", "State/Request-Local-State.md", "State/Databases.md"] }, { "text": "整流罩 Fairings", "children": ["Fairings/Overview.md", "Fairings/Implementing.md", "Fairings/Ad-Hoc-Fairings.md"] }, { "text": "测试", "children": ["Testing/Local-Dispatching.md", "Testing/Validating-Responses.md", "Testing/Testing-Hello-World.md", "Testing/Codegen-Debug.md"] }, { "text": "配置", "children": ["Configuration/Environment.md", "Configuration/Rocket.toml.md", "Configuration/Data-Limits.md", "Configuration/Extras.md", "Configuration/Environment-Variables.md", "Configuration/Programmatic.md", "Configuration/Configuring-TLS.md"] }, { "text": "Pastebin 教程", "children": ["Pastebin/Finished-Product.md", "Pastebin/Getting-Started.md", "Pastebin/Index.md", "Pastebin/Uploading.md", "Pastebin/Retrieving-Pastes.md", "Pastebin/Conclusion.md"] }, { "text": "总结", "children": ["Conclusion/Getting-Help.md", "Conclusion/Whats-Next.md"] }] },
    'pagePath': "Requests/Dynamic-Paths.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "Requests/Dynamic-Paths.html",
    'title': "动态路径",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="动态路径">动态路径<a class="anchor" href="Requests/Dynamic-Paths.html#动态路径">§</a></h2>\n<p>您可以通过在路由的路径中使用尖括号将变量名声明为动态路径段。例如，如果我们想说*你好！*不仅限于世界，我们可以声明一个路由，如下所示：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/hello/&lt;name>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token operator">&amp;</span>RawStr<span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>\n    <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"Hello, {}!"</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>如果将路由挂载在根（<code>.mount(&quot;/&quot;, routes![hello])</code>）上，则具有两个非空段的路径的任何请求（第一个段为<code>hello</code>）将被分派到该<code>hello</code>路由。例如，如果我们要访问<code>/hello/John</code>, 这个程序将响应 <code>Hello, John!</code>。</p>\n<p>允许任意数量的动态路径段。路径段可以是任何类型，包括您自己的类型，只要该类型实现了<a href="https://api.rocket.rs/v0.4/rocket/request/trait.FromParam.html"><code>FromParam</code></a> 特征(trait)。我们称这些类型为参数保护。Rocket为许多标准库类型以及一些特殊的Rocket类型实现了<a href="https://api.rocket.rs/v0.4/rocket/request/trait.FromParam.html"><code>FromParam</code></a> 。有关提供的实现的完整列表，请参阅<a href="https://api.rocket.rs/v0.4/rocket/request/trait.FromParam.html"><code>FromParam</code></a>  API文档。这里有一个更完整的路线来说明各种用法：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/hello/&lt;name>/&lt;age>/&lt;cool>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> String<span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> cool<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> cool <span class="token punctuation">{</span>\n        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"You\'re a cool {} year old, {}!"</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"{}, we need to talk about your coolness."</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="注意rocket将原始字符串与解码字符串分开键入">注意：Rocket将原始字符串与解码字符串分开键入。<a class="anchor" href="Requests/Dynamic-Paths.html#注意rocket将原始字符串与解码字符串分开键入">§</a></h3>\n<p>你可能在上面例子的代码里注意到了一个不熟悉的类型 <a href="https://api.rocket.rs/rocket/http/struct.RawStr.html"><code>RawStr</code></a> 。这是Rocket提供的特殊类型，表示直接从HTTP信息中获取的不明确的，没有验证的，没有解码的，原始字符串。<code>String</code>，<code>&amp;str</code>，<code>Cow</code>表示的验证过的字符串，他们的区别是，<code>&amp;RawStr</code>用来获取未经验证的输入。它提供了的方法很方便的可以将未验证的字符串转化为验证过的字符串。</p>\n<p><code>&amp;RawStr</code>实现了<a href="https://api.rocket.rs/rocket/request/trait.FromParam.html"><code>FromParam</code></a>特性，因此在上面的例子中，它可以作为路径动态参数的类型。当作为路径动态参数的类型时，<code>RawStr</code>指向一个潜在的未解码的字符串。  相比之下，<code>String</code>可以保证是解码之后的。使用哪一个，取决于你的目的，如果允许不安全的访问则使用<code>&amp;RawStr</code>，反之则使用<code>String</code>。</p>\n<h3 id="多段路径">多段路径<a class="anchor" href="Requests/Dynamic-Paths.html#多段路径">§</a></h3>\n<p>您也可以通过在路径中使用<code>&lt;param..&gt;</code>来匹配多个路径段。此类参数的类型（称为段防护）必须实现<a href="https://api.rocket.rs/v0.4/rocket/request/trait.FromSegments.html"><code>FromSegments</code></a>。段防护必须是路径的最后组成部分：段防护之后的任何文本都将导致编译时错误。</p>\n<p>例如，以下路由与以<code>/page/</code>开头的所有路径匹配：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">::</span>path<span class="token punctuation">::</span>PathBuf<span class="token punctuation">;</span>\n\n<span class="token attribute attr-name">#[get(<span class="token string">"/page/&lt;path..>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">get_page</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> PathBuf<span class="token punctuation">)</span> <span class="token punctuation">-></span> T <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>\n</code></pre>\n<p><code>path</code>参数中将提供<code>/page/</code>之后的路径。<code>PathBuf</code>的<code>FromSegments</code>实现确保路径不会导致<a href="https://www.owasp.org/index.php/Path_Traversal">路径遍历攻击</a>。这样，一个安全可靠的静态文件服务器可以用4行实现：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/&lt;file..>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">files</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> PathBuf<span class="token punctuation">)</span> <span class="token punctuation">-></span> Option<span class="token operator">&lt;</span>NamedFile<span class="token operator">></span> <span class="token punctuation">{</span>\n    NamedFile<span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span>Path<span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"static/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="提示rocket使静态文件的服务更加容易">提示：Rocket使静态文件的服务更加容易！<a class="anchor" href="Requests/Dynamic-Paths.html#提示rocket使静态文件的服务更加容易">§</a></h3>\n<p>如果需要从Rocket应用程序中提供静态文件，请考虑使用 <a href="https://api.rocket.rs/v0.4/rocket_contrib/"><code>rocket_contrib</code></a> 中的 <a href="https://api.rocket.rs/v0.4/rocket_contrib/serve/struct.StaticFiles.html"><code>StaticFiles</code></a> 自定义处理程序，这使得它非常简单：</p>\n<p><code>rocket.mount(&quot;/public&quot;, StaticFiles::from(&quot;/static&quot;))</code></p>'
        } }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "index.js" })),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="Requests/Dynamic-Paths.html#动态路径">动态路径</a><ol><li><a href="Requests/Dynamic-Paths.html#注意rocket将原始字符串与解码字符串分开键入">注意：Rocket将原始字符串与解码字符串分开键入。</a></li><li><a href="Requests/Dynamic-Paths.html#多段路径">多段路径</a></li><li><a href="Requests/Dynamic-Paths.html#提示rocket使静态文件的服务更加容易">提示：Rocket使静态文件的服务更加容易！</a></li></ol></li></ol></nav>'
        } }),
    'layout': "default",
    'id': "Dynamic-Paths"
};
