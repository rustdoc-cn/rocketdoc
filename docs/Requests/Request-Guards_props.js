
export default {
    'sidebar': [{ "text": "Rocket编程指南", "link": "", "pagePath": "README.md" }, { "text": "简介", "children": [{ "text": "读者", "link": "Introduction/Audience.html", "pagePath": "Introduction/Audience.md" }, { "text": "前言", "link": "Introduction/Foreword.html", "pagePath": "Introduction/Foreword.md" }] }, { "text": "快速开始", "children": [{ "text": "运行示例", "link": "Quickstart/Running-Examples.html", "pagePath": "Quickstart/Running-Examples.md" }] }, { "text": "入门", "children": [{ "text": "安装 Rust", "link": "Getting-Started/Installing-Rust.html", "pagePath": "Getting-Started/Installing-Rust.md" }, { "text": "你好，世界！", "link": "Getting-Started/Hello-World.html", "pagePath": "Getting-Started/Hello-World.md" }] }, { "text": "概述", "children": [{ "text": "生命周期", "link": "Overview/Lifecycle.html", "pagePath": "Overview/Lifecycle.md" }, { "text": "路由", "link": "Overview/Routing.html", "pagePath": "Overview/Routing.md" }, { "text": "挂载", "link": "Overview/Mounting.html", "pagePath": "Overview/Mounting.md" }, { "text": "启动", "link": "Overview/Launching.html", "pagePath": "Overview/Launching.md" }] }, { "text": "请求 Requests", "children": [{ "text": "方法", "link": "Requests/Methods.html", "pagePath": "Requests/Methods.md" }, { "text": "动态路径", "link": "Requests/Dynamic-Paths.html", "pagePath": "Requests/Dynamic-Paths.md" }, { "text": "匹配转发", "link": "Requests/Forwarding.html", "pagePath": "Requests/Forwarding.md" }, { "text": "查询字符串", "link": "Requests/Query-Strings.html", "pagePath": "Requests/Query-Strings.md" }, { "text": "请求防护", "link": "Requests/Request-Guards.html", "pagePath": "Requests/Request-Guards.md" }, { "text": "Cookies", "link": "Requests/Cookies.html", "pagePath": "Requests/Cookies.md" }, { "text": "格式", "link": "Requests/Format.html", "pagePath": "Requests/Format.md" }, { "text": "正文数据", "link": "Requests/Body-Data.html", "pagePath": "Requests/Body-Data.md" }, { "text": "你好，世界！", "link": "Requests/Error-Catchers.html", "pagePath": "Requests/Error-Catchers.md" }] }, { "text": "响应 Responses", "children": [{ "text": "响应器", "link": "Responses/Responder.html", "pagePath": "Responses/Responder.md" }, { "text": "自定义响应器", "link": "Responses/Custom-Responders.html", "pagePath": "Responses/Custom-Responders.md" }, { "text": "实现响应器", "link": "Responses/Implementations.html", "pagePath": "Responses/Implementations.md" }, { "text": "Rocket响应器", "link": "Responses/Rocket-Responders.html", "pagePath": "Responses/Rocket-Responders.md" }, { "text": "模板", "link": "Responses/Templates.html", "pagePath": "Responses/Templates.md" }, { "text": "类型化Uri", "link": "Responses/Typed-URIs.html", "pagePath": "Responses/Typed-URIs.md" }] }, { "text": "状态 State", "children": [{ "text": "管理状态", "link": "State/Managed-State.html", "pagePath": "State/Managed-State.md" }, { "text": "请求本地状态", "link": "State/Request-Local-State.html", "pagePath": "State/Request-Local-State.md" }, { "text": "数据库", "link": "State/Databases.html", "pagePath": "State/Databases.md" }] }, { "text": "整流罩 Fairings", "children": [{ "text": "概述", "link": "Fairings/Overview.html", "pagePath": "Fairings/Overview.md" }, { "text": "实现", "link": "Fairings/Implementing.html", "pagePath": "Fairings/Implementing.md" }, { "text": "临时 Fairings", "link": "Fairings/Ad-Hoc-Fairings.html", "pagePath": "Fairings/Ad-Hoc-Fairings.md" }] }, { "text": "测试", "children": [{ "text": "本地调试", "link": "Testing/Local-Dispatching.html", "pagePath": "Testing/Local-Dispatching.md" }, { "text": "验证响应", "link": "Testing/Validating-Responses.html", "pagePath": "Testing/Validating-Responses.md" }, { "text": "测试 Hello World！", "link": "Testing/Testing-Hello-World.html", "pagePath": "Testing/Testing-Hello-World.md" }, { "text": "代码生成调试", "link": "Testing/Codegen-Debug.html", "pagePath": "Testing/Codegen-Debug.md" }] }, { "text": "配置", "children": [{ "text": "环境", "link": "Configuration/Environment.html", "pagePath": "Configuration/Environment.md" }, { "text": "Rocket配置文件", "link": "Configuration/Rocket.toml.html", "pagePath": "Configuration/Rocket.toml.md" }, { "text": "数据限制", "link": "Configuration/Data-Limits.html", "pagePath": "Configuration/Data-Limits.md" }, { "text": "附加功能", "link": "Configuration/Extras.html", "pagePath": "Configuration/Extras.md" }, { "text": "环境变量", "link": "Configuration/Environment-Variables.html", "pagePath": "Configuration/Environment-Variables.md" }, { "text": "程式化", "link": "Configuration/Programmatic.html", "pagePath": "Configuration/Programmatic.md" }, { "text": "配置TLS", "link": "Configuration/Configuring-TLS.html", "pagePath": "Configuration/Configuring-TLS.md" }] }, { "text": "Pastebin 教程", "children": [{ "text": "成品", "link": "Pastebin/Finished-Product.html", "pagePath": "Pastebin/Finished-Product.md" }, { "text": "入门", "link": "Pastebin/Getting-Started.html", "pagePath": "Pastebin/Getting-Started.md" }, { "text": "主页", "link": "Pastebin/Index.html", "pagePath": "Pastebin/Index.md" }, { "text": "上传", "link": "Pastebin/Uploading.html", "pagePath": "Pastebin/Uploading.md" }, { "text": "检索粘贴", "link": "Pastebin/Retrieving-Pastes.html", "pagePath": "Pastebin/Retrieving-Pastes.md" }, { "text": "总结", "link": "Pastebin/Conclusion.html", "pagePath": "Pastebin/Conclusion.md" }] }, { "text": "总结", "children": [{ "text": "获取帮助", "link": "Conclusion/Getting-Help.html", "pagePath": "Conclusion/Getting-Help.md" }, { "text": "下一步是什么？", "link": "Conclusion/Whats-Next.html", "pagePath": "Conclusion/Whats-Next.md" }] }],
    'prev': { "text": "查询字符串", "link": "Requests/Query-Strings.html", "pagePath": "Requests/Query-Strings.md" },
    'next': { "text": "Cookies", "link": "Requests/Cookies.html", "pagePath": "Requests/Cookies.md" },
    'config': { "srcDir": "source/_posts", "outDir": "dist", "exclude": ["**/.*", "markdoc.config.json", "LICENSE", "dist"], "baseDir": "/rocketdoc/", "watch": false, "serve": true, "addr": "127.0.0.1:8096", "title": "ROCKET指南", "nav": [{ "text": "首页", "link": "" }], "sidebar": ["README.md", { "text": "简介", "children": ["Introduction/Audience.md", "Introduction/Foreword.md"] }, { "text": "快速开始", "children": ["Quickstart/Running-Examples.md"] }, { "text": "入门", "children": ["Getting-Started/Installing-Rust.md", "Getting-Started/Hello-World.md"] }, { "text": "概述", "children": ["Overview/Lifecycle.md", "Overview/Routing.md", "Overview/Mounting.md", "Overview/Launching.md"] }, { "text": "请求 Requests", "children": ["Requests/Methods.md", "Requests/Dynamic-Paths.md", "Requests/Forwarding.md", "Requests/Query-Strings.md", "Requests/Request-Guards.md", "Requests/Cookies.md", "Requests/Format.md", "Requests/Body-Data.md", "Requests/Error-Catchers.md"] }, { "text": "响应 Responses", "children": ["Responses/Responder.md", "Responses/Custom-Responders.md", "Responses/Implementations.md", "Responses/Rocket-Responders.md", "Responses/Templates.md", "Responses/Typed-URIs.md"] }, { "text": "状态 State", "children": ["State/Managed-State.md", "State/Request-Local-State.md", "State/Databases.md"] }, { "text": "整流罩 Fairings", "children": ["Fairings/Overview.md", "Fairings/Implementing.md", "Fairings/Ad-Hoc-Fairings.md"] }, { "text": "测试", "children": ["Testing/Local-Dispatching.md", "Testing/Validating-Responses.md", "Testing/Testing-Hello-World.md", "Testing/Codegen-Debug.md"] }, { "text": "配置", "children": ["Configuration/Environment.md", "Configuration/Rocket.toml.md", "Configuration/Data-Limits.md", "Configuration/Extras.md", "Configuration/Environment-Variables.md", "Configuration/Programmatic.md", "Configuration/Configuring-TLS.md"] }, { "text": "Pastebin 教程", "children": ["Pastebin/Finished-Product.md", "Pastebin/Getting-Started.md", "Pastebin/Index.md", "Pastebin/Uploading.md", "Pastebin/Retrieving-Pastes.md", "Pastebin/Conclusion.md"] }, { "text": "总结", "children": ["Conclusion/Getting-Help.md", "Conclusion/Whats-Next.md"] }] },
    'pagePath': "Requests/Request-Guards.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "Requests/Request-Guards.html",
    'title': "请求防护",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="请求防护">请求防护<a class="anchor" href="Requests/Request-Guards.html#请求防护">§</a></h2>\n<p>请求防护是Rocket最强大的工具之一。顾名思义，请求防护根据请求包含的数据防止处理器被错误的调用。更具体地说，请求防护是一种表示任意验证策略的类型。验证策略是通过<a href="https://api.rocket.rs/v0.4/rocket/request/trait.FromRequest.html"><code>FromRequest</code></a>特性实现的。实现<code>FromRequest</code>的每种类型都是一个请求防护。</p>\n<p>请求防护在向处理程序中传参的时候起作用。任意数量的请求防护可以在路由处理程序中以参数出现。Rocket将在调用处理程序之前自动调用请求防护的<a href="https://api.rocket.rs/v0.4/rocket/request/trait.FromRequest.html"><code>FromRequest</code></a>实现。Rocket只在所有防护通过时向处理程序发送请求。</p>\n<p>例如，下面的虚拟处理程序使用3个请求防护，<code>A</code>、<code>B</code>和<code>C</code>。如果输入在<code>route</code>属性中没有命名，则将其标识为请求防护。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/&lt;param>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span>param<span class="token punctuation">:</span> <span class="token keyword">isize</span><span class="token punctuation">,</span> a<span class="token punctuation">:</span> A<span class="token punctuation">,</span> b<span class="token punctuation">:</span> B<span class="token punctuation">,</span> c<span class="token punctuation">:</span> C<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token punctuation">...</span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>\n</code></pre>\n<p>请求防护按从左到右的顺序。在上面的例子中，顺序是A后B后C。失败是短路；如果一个保护失败，则不尝试其余的保护。要了解有关请求保护和实现它们的更多信息，请参阅 <a href="https://api.rocket.rs/v0.4/rocket/request/trait.FromRequest.html"><code>FromRequest</code></a> 文档。</p>\n<h3 id="自定义防护">自定义防护<a class="anchor" href="Requests/Request-Guards.html#自定义防护">§</a></h3>\n<p>您可以为自己的类型实现<code>FromRequest</code>。例如，为了防止敏感路由在请求头中不存在<code>ApiKey</code>的情况下运行，可以创建实现<code>from request</code>的<code>ApiKey</code>类型，然后将其用作请求防护：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/sensitive"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">sensitive</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> ApiKey<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">\'static</span> str <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>\n</code></pre>\n<p>您还可以为<code>AdminUser</code>类型实现<code>FromRequest</code>，该类型使用传入的<code>cookie</code>对管理员进行身份验证。然后，在参数列表中具有<code>AdminUser</code>或<code>ApiKey</code>类型的任何处理程序都被保证只有在满足适当的条件时才被调用。请求保护集中化策略，从而产生更简单、更安全的应用程序。</p>\n<h3 id="防护显而易见">防护显而易见<a class="anchor" href="Requests/Request-Guards.html#防护显而易见">§</a></h3>\n<p>当请求防护类型只能通过<a href="https://api.rocket.rs/v0.4/rocket/request/trait.FromRequest.html"><code>FromRequest</code></a>实现，并且不是<code>Copy</code>类型时，存在一个请求防护值，提供了一个类型级别的证明，即当前的请求已经针对任意策略进行了验证。通过规定数据访问方法通过请求防护来验证授权证明，这提供了保护应用程序免受访问控制冲突的强大方法。我们称这种使用请求防护的观念为防护显而易见。</p>\n<p>作为一个具体的例子，下面的应用程序有一个函数<code>health_records</code>，它返回数据库中的所有健康记录。因为健康记录是敏感信息，所以只能由超级用户访问。<code>SuperUser</code>请求防护对超级用户进行身份验证和授权，其<code>FromRequest</code>实现是构建<code>SuperUser</code>的唯一方法。通过如下声明的<code>health_records</code>函数，可以保证在编译时防止违反health records的访问控制：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">health_records</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> <span class="token operator">&amp;</span>SuperUser<span class="token punctuation">)</span> <span class="token punctuation">-></span> Records <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>\n</code></pre>\n<p>推断如下：</p>\n<ol>\n<li><code>health_records</code>函数需要<code>&amp;SuperUser</code>类型。</li>\n<li><code>SuperUser</code>类型的唯一构造函数是<code>FromRequest</code>。</li>\n<li>Rocket只能通过<code>FromRequest</code>提供活动 <code>&amp;Request</code>来构造。</li>\n<li>因此，必须有一个<code>Request</code>授权<code>SuperUser</code>调用<code>health_records</code>。</li>\n</ol>\n<h3 id="注意">注意<a class="anchor" href="Requests/Request-Guards.html#注意">§</a></h3>\n<p>以牺牲保护类型中的存在时间参数为代价，通过将传递给<code>FromRequest</code>的<code>Request</code>的生存期绑定到请求保护，确保保护值始终与活动请求相对应，可以使保证变得更加强大。</p>\n<p>我们建议对所有数据访问使用请求保护透明度。</p>\n<h2 id="匹配转发与防护">匹配转发与防护<a class="anchor" href="Requests/Request-Guards.html#匹配转发与防护">§</a></h2>\n<p>请求防护和匹配规则是强大的校验组合。为了说明，我们考虑一个简单的鉴权功能是怎么实现的。</p>\n<p>我们从两个请求防护开始：</p>\n<ul>\n<li>\n<p><code>User</code>：经过身份验证的普通用户。</p>\n<p><code>User</code>的<code>FromRequest</code>实现检查<code>cookie</code>是否标识用户并返回用户值（如果是）。如果没有用户可以通过身份验证，防护就会转发。</p>\n</li>\n<li>\n<p><code>AdminUser</code>：以管理员身份验证的用户。</p>\n<p><code>AdminUser</code>的<code>FromRequest</code>实现检查<code>cookie</code>是否标识管理用户，如果是，则返回<code>AdminUser</code>值。如果没有用户可以通过身份验证，防护就会转发。</p>\n</li>\n</ul>\n<p>我们现在将这两个防护与转发结合使用，以实现以下三个路由，每个路由都指向位于<code>/admin</code>的管理控制面板：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/admin"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">admin_panel</span><span class="token punctuation">(</span>admin<span class="token punctuation">:</span> AdminUser<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">\'static</span> str <span class="token punctuation">{</span>\n    <span class="token string">"Hello, administrator. This is the admin panel!"</span>\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[get(<span class="token string">"/admin"</span>, rank = 2)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">admin_panel_user</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> User<span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">\'static</span> str <span class="token punctuation">{</span>\n    <span class="token string">"Sorry, you must be an administrator to access this page."</span>\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[get(<span class="token string">"/admin"</span>, rank = 3)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">admin_panel_redirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Redirect <span class="token punctuation">{</span>\n    Redirect<span class="token punctuation">::</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>以上三种路由编码认证和授权。只有当管理员登录时， <code>admin_panel</code> 路由才会成功。只有这样才会显示管理面板。如果用户不是管理员，则<code>AdminUser</code>防护将转发。由于<code>admin_panel_user</code>路由排在第二位，因此尝试排在第二位。如果有任何用户登录，则此路由成功，并显示授权失败消息。最后，如果用户未登录，则尝试<code>admin_panel_redirect</code>路由。因为这条路由没有防护，所以总是成功的。用户被重定向到登录页。</p>'
        } }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "index.js" })),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="Requests/Request-Guards.html#请求防护">请求防护</a><ol><li><a href="Requests/Request-Guards.html#自定义防护">自定义防护</a></li><li><a href="Requests/Request-Guards.html#防护显而易见">防护显而易见</a></li><li><a href="Requests/Request-Guards.html#注意">注意</a></li></ol></li><li><a href="Requests/Request-Guards.html#匹配转发与防护">匹配转发与防护</a></li></ol></nav>'
        } }),
    'layout': "default",
    'id': "Request-Guards"
};
