
export default {
    'sidebar': [{ "text": "Rocket编程指南", "link": "", "pagePath": "README.md" }, { "text": "简介", "children": [{ "text": "读者", "link": "Introduction/Audience.html", "pagePath": "Introduction/Audience.md" }, { "text": "前言", "link": "Introduction/Foreword.html", "pagePath": "Introduction/Foreword.md" }] }, { "text": "快速开始", "children": [{ "text": "运行示例", "link": "Quickstart/Running-Examples.html", "pagePath": "Quickstart/Running-Examples.md" }] }, { "text": "入门", "children": [{ "text": "安装 Rust", "link": "Getting-Started/Installing-Rust.html", "pagePath": "Getting-Started/Installing-Rust.md" }, { "text": "你好，世界！", "link": "Getting-Started/Hello-World.html", "pagePath": "Getting-Started/Hello-World.md" }] }, { "text": "概述", "children": [{ "text": "生命周期", "link": "Overview/Lifecycle.html", "pagePath": "Overview/Lifecycle.md" }, { "text": "路由", "link": "Overview/Routing.html", "pagePath": "Overview/Routing.md" }, { "text": "挂载", "link": "Overview/Mounting.html", "pagePath": "Overview/Mounting.md" }, { "text": "启动", "link": "Overview/Launching.html", "pagePath": "Overview/Launching.md" }] }, { "text": "请求 Requests", "children": [{ "text": "方法", "link": "Requests/Methods.html", "pagePath": "Requests/Methods.md" }, { "text": "动态路径", "link": "Requests/Dynamic-Paths.html", "pagePath": "Requests/Dynamic-Paths.md" }, { "text": "匹配转发", "link": "Requests/Forwarding.html", "pagePath": "Requests/Forwarding.md" }, { "text": "查询字符串", "link": "Requests/Query-Strings.html", "pagePath": "Requests/Query-Strings.md" }, { "text": "请求防护", "link": "Requests/Request-Guards.html", "pagePath": "Requests/Request-Guards.md" }, { "text": "Cookies", "link": "Requests/Cookies.html", "pagePath": "Requests/Cookies.md" }, { "text": "格式", "link": "Requests/Format.html", "pagePath": "Requests/Format.md" }, { "text": "正文数据", "link": "Requests/Body-Data.html", "pagePath": "Requests/Body-Data.md" }, { "text": "你好，世界！", "link": "Requests/Error-Catchers.html", "pagePath": "Requests/Error-Catchers.md" }] }, { "text": "响应 Responses", "children": [{ "text": "响应器", "link": "Responses/Responder.html", "pagePath": "Responses/Responder.md" }, { "text": "自定义响应器", "link": "Responses/Custom-Responders.html", "pagePath": "Responses/Custom-Responders.md" }, { "text": "实现响应器", "link": "Responses/Implementations.html", "pagePath": "Responses/Implementations.md" }, { "text": "Rocket响应器", "link": "Responses/Rocket-Responders.html", "pagePath": "Responses/Rocket-Responders.md" }, { "text": "模板", "link": "Responses/Templates.html", "pagePath": "Responses/Templates.md" }, { "text": "类型化Uri", "link": "Responses/Typed-URIs.html", "pagePath": "Responses/Typed-URIs.md" }] }, { "text": "状态 State", "children": [{ "text": "管理状态", "link": "State/Managed-State.html", "pagePath": "State/Managed-State.md" }, { "text": "请求本地状态", "link": "State/Request-Local-State.html", "pagePath": "State/Request-Local-State.md" }, { "text": "数据库", "link": "State/Databases.html", "pagePath": "State/Databases.md" }] }, { "text": "整流罩 Fairings", "children": [{ "text": "概述", "link": "Fairings/Overview.html", "pagePath": "Fairings/Overview.md" }, { "text": "实现", "link": "Fairings/Implementing.html", "pagePath": "Fairings/Implementing.md" }, { "text": "临时 Fairings", "link": "Fairings/Ad-Hoc-Fairings.html", "pagePath": "Fairings/Ad-Hoc-Fairings.md" }] }, { "text": "测试", "children": [{ "text": "本地调试", "link": "Testing/Local-Dispatching.html", "pagePath": "Testing/Local-Dispatching.md" }, { "text": "验证响应", "link": "Testing/Validating-Responses.html", "pagePath": "Testing/Validating-Responses.md" }, { "text": "测试 Hello World！", "link": "Testing/Testing-Hello-World.html", "pagePath": "Testing/Testing-Hello-World.md" }, { "text": "代码生成调试", "link": "Testing/Codegen-Debug.html", "pagePath": "Testing/Codegen-Debug.md" }] }, { "text": "配置", "children": [{ "text": "环境", "link": "Configuration/Environment.html", "pagePath": "Configuration/Environment.md" }, { "text": "Rocket配置文件", "link": "Configuration/Rocket.toml.html", "pagePath": "Configuration/Rocket.toml.md" }, { "text": "数据限制", "link": "Configuration/Data-Limits.html", "pagePath": "Configuration/Data-Limits.md" }, { "text": "附加功能", "link": "Configuration/Extras.html", "pagePath": "Configuration/Extras.md" }, { "text": "环境变量", "link": "Configuration/Environment-Variables.html", "pagePath": "Configuration/Environment-Variables.md" }, { "text": "程式化", "link": "Configuration/Programmatic.html", "pagePath": "Configuration/Programmatic.md" }, { "text": "配置TLS", "link": "Configuration/Configuring-TLS.html", "pagePath": "Configuration/Configuring-TLS.md" }] }, { "text": "Pastebin 教程", "children": [{ "text": "成品", "link": "Pastebin/Finished-Product.html", "pagePath": "Pastebin/Finished-Product.md" }, { "text": "入门", "link": "Pastebin/Getting-Started.html", "pagePath": "Pastebin/Getting-Started.md" }, { "text": "主页", "link": "Pastebin/Index.html", "pagePath": "Pastebin/Index.md" }, { "text": "上传", "link": "Pastebin/Uploading.html", "pagePath": "Pastebin/Uploading.md" }, { "text": "检索粘贴", "link": "Pastebin/Retrieving-Pastes.html", "pagePath": "Pastebin/Retrieving-Pastes.md" }, { "text": "总结", "link": "Pastebin/Conclusion.html", "pagePath": "Pastebin/Conclusion.md" }] }, { "text": "总结", "children": [{ "text": "获取帮助", "link": "Conclusion/Getting-Help.html", "pagePath": "Conclusion/Getting-Help.md" }, { "text": "下一步是什么？", "link": "Conclusion/Whats-Next.html", "pagePath": "Conclusion/Whats-Next.md" }] }],
    'prev': { "text": "模板", "link": "Responses/Templates.html", "pagePath": "Responses/Templates.md" },
    'next': { "text": "管理状态", "link": "State/Managed-State.html", "pagePath": "State/Managed-State.md" },
    'config': { "srcDir": "source/_posts", "outDir": "dist", "exclude": ["**/.*", "markdoc.config.json", "LICENSE", "dist"], "baseDir": "/rocketdoc/", "watch": false, "serve": true, "addr": "127.0.0.1:8096", "title": "ROCKET指南", "nav": [{ "text": "首页", "link": "" }], "sidebar": ["README.md", { "text": "简介", "children": ["Introduction/Audience.md", "Introduction/Foreword.md"] }, { "text": "快速开始", "children": ["Quickstart/Running-Examples.md"] }, { "text": "入门", "children": ["Getting-Started/Installing-Rust.md", "Getting-Started/Hello-World.md"] }, { "text": "概述", "children": ["Overview/Lifecycle.md", "Overview/Routing.md", "Overview/Mounting.md", "Overview/Launching.md"] }, { "text": "请求 Requests", "children": ["Requests/Methods.md", "Requests/Dynamic-Paths.md", "Requests/Forwarding.md", "Requests/Query-Strings.md", "Requests/Request-Guards.md", "Requests/Cookies.md", "Requests/Format.md", "Requests/Body-Data.md", "Requests/Error-Catchers.md"] }, { "text": "响应 Responses", "children": ["Responses/Responder.md", "Responses/Custom-Responders.md", "Responses/Implementations.md", "Responses/Rocket-Responders.md", "Responses/Templates.md", "Responses/Typed-URIs.md"] }, { "text": "状态 State", "children": ["State/Managed-State.md", "State/Request-Local-State.md", "State/Databases.md"] }, { "text": "整流罩 Fairings", "children": ["Fairings/Overview.md", "Fairings/Implementing.md", "Fairings/Ad-Hoc-Fairings.md"] }, { "text": "测试", "children": ["Testing/Local-Dispatching.md", "Testing/Validating-Responses.md", "Testing/Testing-Hello-World.md", "Testing/Codegen-Debug.md"] }, { "text": "配置", "children": ["Configuration/Environment.md", "Configuration/Rocket.toml.md", "Configuration/Data-Limits.md", "Configuration/Extras.md", "Configuration/Environment-Variables.md", "Configuration/Programmatic.md", "Configuration/Configuring-TLS.md"] }, { "text": "Pastebin 教程", "children": ["Pastebin/Finished-Product.md", "Pastebin/Getting-Started.md", "Pastebin/Index.md", "Pastebin/Uploading.md", "Pastebin/Retrieving-Pastes.md", "Pastebin/Conclusion.md"] }, { "text": "总结", "children": ["Conclusion/Getting-Help.md", "Conclusion/Whats-Next.md"] }] },
    'pagePath': "Responses/Typed-URIs.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "Responses/Typed-URIs.html",
    'title': "类型化Uri",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="类型化uri">类型化Uri<a class="anchor" href="Responses/Typed-URIs.html#类型化uri">§</a></h2>\n<p>Rocket的<a href="https://api.rocket.rs/v0.4/rocket_codegen/macro.uri.html"><code>uri!</code></a>宏允许您以健壮，类型安全和URI安全的方式构建URI来路由应用程序中的路由。类型或路由参数不匹配在编译时被捕获，并且对路由URI的更改会自动反映在生成的URI中。</p>\n<p><code>uri!</code>宏返回一个<a href="https://api.rocket.rs/v0.4/rocket/http/uri/struct.Origin.html"><code>Origin</code></a>与所提供的航线的URI结构内插与所述给定值。<code>uri!</code>使用<a href="https://api.rocket.rs/v0.4/rocket/http/uri/trait.UriDisplay.html"><code>UriDisplay</code></a>值类型的实现，将每个传入的值呈现在URI中的适当位置。该<code>UriDisplay</code>实现可确保呈现的值是URI安全的。</p>\n<p>注意， <code>Origin</code> 实现 <code>Into&lt;Uri&gt;</code> （扩展为<code>TryInto&lt;Uri&gt;</code>），因此可以根据需要使用 <code>.into()</code>将其转换为 <a href="https://api.rocket.rs/v0.4/rocket/http/uri/enum.Uri.html"><code>Uri</code></a> ，并传递给 <a href="https://api.rocket.rs/v0.4/rocket/response/struct.Redirect.html#method.to"><code>Redirect::to()</code></a>等方法。</p>\n<p>例如，给定以下路由：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/person/&lt;name>?&lt;age>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> String<span class="token punctuation">,</span> age<span class="token punctuation">:</span> Option<span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> T\n</code></pre>\n<p><code>person</code> 的URIs可以创建如下：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token comment">// with unnamed parameters, in route path declaration order</span>\n<span class="token keyword">let</span> mike <span class="token operator">=</span> <span class="token macro property">uri!</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token string">"Mike Smith"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mike<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/person/Mike%20Smith?age=28"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// with named parameters, order irrelevant</span>\n<span class="token keyword">let</span> mike <span class="token operator">=</span> <span class="token macro property">uri!</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> name <span class="token operator">=</span> <span class="token string">"Mike"</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> mike <span class="token operator">=</span> <span class="token macro property">uri!</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> age <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"Mike"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mike<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/person/Mike?age=28"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// with a specific mount-point</span>\n<span class="token keyword">let</span> mike <span class="token operator">=</span> <span class="token macro property">uri!</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">,</span> person<span class="token punctuation">:</span> name <span class="token operator">=</span> <span class="token string">"Mike"</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mike<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/api/person/Mike?age=28"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// with optional (defaultable) query parameters ignored</span>\n<span class="token keyword">let</span> mike <span class="token operator">=</span> <span class="token macro property">uri!</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token string">"Mike"</span><span class="token punctuation">,</span> _<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> mike <span class="token operator">=</span> <span class="token macro property">uri!</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> name <span class="token operator">=</span> <span class="token string">"Mike"</span><span class="token punctuation">,</span> age <span class="token operator">=</span> _<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>mike<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/person/Mike"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Rocket会在编译时通知您任何不匹配的参数：</p>\n<pre class="language-shell"><code class="language-shell">error: person route uri expects <span class="token number">2</span> parameters but <span class="token number">1</span> was supplied\n --<span class="token operator">></span> examples/uri/src/main.rs:9:29\n  <span class="token operator">|</span>\n<span class="token number">9</span> <span class="token operator">|</span>     uri<span class="token operator">!</span><span class="token punctuation">(</span>person: <span class="token string">"Mike Smith"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token operator">|</span>                  ^^^^^^^^^^^^\n  <span class="token operator">|</span>\n  <span class="token operator">=</span> note: expected parameters: name: String, age: Option<span class="token operator">&lt;</span>u<span class="token operator"><span class="token file-descriptor important">8</span>></span>\n</code></pre>\n<p>Rocket还会在编译时通知您任何类型错误：</p>\n<pre class="language-rust"><code class="language-rust">error<span class="token punctuation">:</span> the <span class="token keyword">trait</span> bound <span class="token keyword">u8</span><span class="token punctuation">:</span> FromUriParam<span class="token operator">&lt;</span>Query<span class="token punctuation">,</span> <span class="token operator">&amp;</span>str<span class="token operator">></span> is not satisfied\n <span class="token operator">-</span><span class="token punctuation">-></span> examples<span class="token operator">/</span>uri<span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">35</span>\n  <span class="token operator">|</span>\n<span class="token number">9</span> <span class="token operator">|</span>     <span class="token macro property">uri!</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> age <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"Mike"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token operator">|</span>                        <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span> FromUriParam<span class="token operator">&lt;</span>Query<span class="token punctuation">,</span> <span class="token operator">&amp;</span>str<span class="token operator">></span> is not implemented <span class="token keyword">for</span> <span class="token keyword">u8</span>\n  <span class="token operator">|</span>\n</code></pre>\n<p>我们建议您为路由构造uri时仅使用<code>uri!</code>。</p>\n<h3 id="忽略">忽略<a class="anchor" href="Responses/Typed-URIs.html#忽略">§</a></h3>\n<p>如前所述，可以在查询中使用<code>_</code>表达式来代替查询参数<code>uri!</code>。路由URI中的相应类型必须实现<a href="https://api.rocket.rs/v0.4/rocket/http/uri/trait.Ignorable.html"><code>Ignorable</code></a>。忽略的参数不会内插到结果中<code>Origin</code>。路径参数不可忽略。</p>\n<h4 id="派生-uridisplay">派生 <code>UriDisplay</code><a class="anchor" href="Responses/Typed-URIs.html#派生-uridisplay">§</a></h4>\n<p>该<code>UriDisplay</code>特性可以导出自定义类型。对于出现在URI的路径部分中的类型，请使用派生<a href="https://api.rocket.rs/v0.4/rocket_codegen/derive.UriDisplayPath.html"><code>UriDisplayPath</code></a>；对于出现在URI的查询部分中的类型，请使用派生<a href="https://api.rocket.rs/v0.4/rocket_codegen/derive.UriDisplayQuery.html"><code>UriDisplayQuery</code></a>。</p>\n<p>例如，请考虑以下表单结构和路由：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(FromForm, UriDisplayQuery)]</span>\n<span class="token keyword">struct</span> UserDetails<span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'r</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    age<span class="token punctuation">:</span> Option<span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">></span><span class="token punctuation">,</span>\n    nickname<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">\'r</span> RawStr<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[post(<span class="token string">"/user/&lt;id>?&lt;details..>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">add_user</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> details<span class="token punctuation">:</span> Form<span class="token operator">&lt;</span>UserDetails<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">..</span> <span class="token punctuation">}</span>\n</code></pre>\n<p>通过使用派生<code>UriDisplayQuery</code>，将<code>UriDisplay</code>自动生成的实现，从而允许<code>add_user</code>使用<code>uri!</code>以下命令生成URI ：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token macro property">uri!</span><span class="token punctuation">(</span>add_user<span class="token punctuation">:</span> <span class="token number">120</span><span class="token punctuation">,</span> UserDetails <span class="token punctuation">{</span> age<span class="token punctuation">:</span> Some<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nickname<span class="token punctuation">:</span> <span class="token string">"Bob"</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token operator">=></span> <span class="token string">"/user/120?age=20&amp;nickname=Bob"</span>\n</code></pre>\n<p><a href="https://api.rocket.rs/v0.4/rocket/http/uri/trait.UriPart.html"><code>UriPart</code></a> 特性对将URI的一部分标记为 <a href="https://api.rocket.rs/v0.4/rocket/http/uri/enum.Path.html"><code>Path</code></a> 或 <a href="https://api.rocket.rs/v0.4/rocket/http/uri/enum.Query.html"><code>Query</code></a>类型进行类型化。换句话说，实现UriPart类型是在类型级别表示URI的一部分的标记类型。<a href="https://api.rocket.rs/v0.4/rocket/http/uri/trait.UriDisplay.html"><code>UriDisplay</code></a>和<a href="https://api.rocket.rs/v0.4/rocket/http/uri/trait.FromUriParam.html"><code>FromUriParam</code></a>等特性通过 <code>UriPart</code>：<code>P: UriPart</code>绑定了一个泛型参数。这将为每个特征创建两个实例：<code>UriDisplay&lt;Query&gt;</code>和<code>UriDisplay&lt;Path&gt;</code>，以及<code>FromUriParam&lt;Query&gt;</code>和<code>FromUriParam&lt;Path&gt;</code>。</p>\n<p>顾名思义，<code>Path</code>当在URI的路径部分中显示参数时使用特性的版本，而在URI <code>Query</code>的查询部分中显示参数时使用版本的特性。这些特性的不同版本恰好存在，以便在类型级别区分要写入URI的值，从而在面对两个位置之间的差异时允许类型安全。例如，虽然<code>None</code>在查询部分使用值有效，但完全省略该参数，<em>但</em>在路径部分无效。通过在类型系统区分，这两个条件可以适当地通过的不同的实施方式实施<code>FromUriParam</code>和<code>FromUriParam</code>。</p>\n<h3 id="转换">转换<a class="anchor" href="Responses/Typed-URIs.html#转换">§</a></h3>\n<p>将<a href="https://api.rocket.rs/v0.4/rocket/http/uri/trait.FromUriParam.html"><code>FromUriParam</code></a>用于执行对传递给每个值的转换<code>uri!</code>之前将显示它<code>UriDisplay</code>。如果<code>FromUriParam</code>存在用于<code>T</code>part URI part 的类型的实现<code>P</code>，则<code>S</code>可以在<code>uri!</code>宏中为type为<code>T</code>in的声明的URI参数使用type的值<code>P</code>。例如，Rocket提供的以下实现允许<code>&amp;str</code>在<code>uri!</code>调用中声明为的URI参数使用<code>String</code>：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span>P<span class="token punctuation">:</span> UriPart<span class="token punctuation">,</span> <span class="token lifetime-annotation symbol">\'a</span><span class="token operator">></span> FromUriParam<span class="token operator">&lt;</span>P<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">\'a</span> str<span class="token operator">></span> <span class="token keyword">for</span> String <span class="token punctuation">{</span> <span class="token punctuation">..</span> <span class="token punctuation">}</span>\n</code></pre>\n<p>需要注意的其他转换包括：</p>\n<ul>\n<li><code>&amp;str</code> to <code>RawStr</code></li>\n<li><code>String</code> to <code>&amp;str</code></li>\n<li><code>String</code> to <code>RawStr</code></li>\n<li><code>T</code> to <code>Option&lt;T&gt;</code></li>\n<li><code>T</code> to <code>Result&lt;T,E&gt;</code></li>\n<li><code>T</code> to <code>Form&lt;T&gt;</code></li>\n<li><code>&amp;str</code> to <code>&amp;Path</code></li>\n<li><code>&amp;str</code> to <code>PathBuf</code></li>\n</ul>\n<p>转换<em>嵌套</em>。例如，<code>T</code>当需要一个类型值时，可以提供一个类型值<code>Option&lt;Form&lt;T&gt;&gt;</code>：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/person/&lt;id>?&lt;details>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">person</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> details<span class="token punctuation">:</span> Option<span class="token operator">&lt;</span>Form<span class="token operator">&lt;</span>UserDetails<span class="token operator">>></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> T\n\n<span class="token macro property">uri!</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> id <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> details <span class="token operator">=</span> UserDetails <span class="token punctuation">{</span> <span class="token punctuation">..</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>有关<a href="https://api.rocket.rs/v0.4/rocket/http/uri/trait.FromUriParam.html"><code>FromUriParam</code></a>更多详细信息，请参见文档。</p>'
        } }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "index.js" })),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="Responses/Typed-URIs.html#类型化uri">类型化Uri</a><ol><li><a href="Responses/Typed-URIs.html#忽略">忽略</a><ol></ol></li><li><a href="Responses/Typed-URIs.html#转换">转换</a></li></ol></li></ol></nav>'
        } }),
    'layout': "default",
    'id': "Typed-URIs"
};
