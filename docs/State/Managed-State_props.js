
export default {
    'sidebar': [{ "text": "Rocket编程指南", "link": "", "pagePath": "README.md" }, { "text": "简介", "children": [{ "text": "读者", "link": "Introduction/Audience.html", "pagePath": "Introduction/Audience.md" }, { "text": "前言", "link": "Introduction/Foreword.html", "pagePath": "Introduction/Foreword.md" }] }, { "text": "快速开始", "children": [{ "text": "运行示例", "link": "Quickstart/Running-Examples.html", "pagePath": "Quickstart/Running-Examples.md" }] }, { "text": "入门", "children": [{ "text": "安装 Rust", "link": "Getting-Started/Installing-Rust.html", "pagePath": "Getting-Started/Installing-Rust.md" }, { "text": "你好，世界！", "link": "Getting-Started/Hello-World.html", "pagePath": "Getting-Started/Hello-World.md" }] }, { "text": "概述", "children": [{ "text": "生命周期", "link": "Overview/Lifecycle.html", "pagePath": "Overview/Lifecycle.md" }, { "text": "路由", "link": "Overview/Routing.html", "pagePath": "Overview/Routing.md" }, { "text": "挂载", "link": "Overview/Mounting.html", "pagePath": "Overview/Mounting.md" }, { "text": "启动", "link": "Overview/Launching.html", "pagePath": "Overview/Launching.md" }] }, { "text": "请求 Requests", "children": [{ "text": "方法", "link": "Requests/Methods.html", "pagePath": "Requests/Methods.md" }, { "text": "动态路径", "link": "Requests/Dynamic-Paths.html", "pagePath": "Requests/Dynamic-Paths.md" }, { "text": "匹配转发", "link": "Requests/Forwarding.html", "pagePath": "Requests/Forwarding.md" }, { "text": "查询字符串", "link": "Requests/Query-Strings.html", "pagePath": "Requests/Query-Strings.md" }, { "text": "请求防护", "link": "Requests/Request-Guards.html", "pagePath": "Requests/Request-Guards.md" }, { "text": "Cookies", "link": "Requests/Cookies.html", "pagePath": "Requests/Cookies.md" }, { "text": "格式", "link": "Requests/Format.html", "pagePath": "Requests/Format.md" }, { "text": "正文数据", "link": "Requests/Body-Data.html", "pagePath": "Requests/Body-Data.md" }, { "text": "你好，世界！", "link": "Requests/Error-Catchers.html", "pagePath": "Requests/Error-Catchers.md" }] }, { "text": "响应 Responses", "children": [{ "text": "响应器", "link": "Responses/Responder.html", "pagePath": "Responses/Responder.md" }, { "text": "自定义响应器", "link": "Responses/Custom-Responders.html", "pagePath": "Responses/Custom-Responders.md" }, { "text": "实现响应器", "link": "Responses/Implementations.html", "pagePath": "Responses/Implementations.md" }, { "text": "Rocket响应器", "link": "Responses/Rocket-Responders.html", "pagePath": "Responses/Rocket-Responders.md" }, { "text": "模板", "link": "Responses/Templates.html", "pagePath": "Responses/Templates.md" }, { "text": "类型化Uri", "link": "Responses/Typed-URIs.html", "pagePath": "Responses/Typed-URIs.md" }] }, { "text": "状态 State", "children": [{ "text": "管理状态", "link": "State/Managed-State.html", "pagePath": "State/Managed-State.md" }, { "text": "请求本地状态", "link": "State/Request-Local-State.html", "pagePath": "State/Request-Local-State.md" }, { "text": "数据库", "link": "State/Databases.html", "pagePath": "State/Databases.md" }] }, { "text": "整流罩 Fairings", "children": [{ "text": "概述", "link": "Fairings/Overview.html", "pagePath": "Fairings/Overview.md" }, { "text": "实现", "link": "Fairings/Implementing.html", "pagePath": "Fairings/Implementing.md" }, { "text": "临时 Fairings", "link": "Fairings/Ad-Hoc-Fairings.html", "pagePath": "Fairings/Ad-Hoc-Fairings.md" }] }, { "text": "测试", "children": [{ "text": "本地调试", "link": "Testing/Local-Dispatching.html", "pagePath": "Testing/Local-Dispatching.md" }, { "text": "验证响应", "link": "Testing/Validating-Responses.html", "pagePath": "Testing/Validating-Responses.md" }, { "text": "测试 Hello World！", "link": "Testing/Testing-Hello-World.html", "pagePath": "Testing/Testing-Hello-World.md" }, { "text": "代码生成调试", "link": "Testing/Codegen-Debug.html", "pagePath": "Testing/Codegen-Debug.md" }] }, { "text": "配置", "children": [{ "text": "环境", "link": "Configuration/Environment.html", "pagePath": "Configuration/Environment.md" }, { "text": "Rocket配置文件", "link": "Configuration/Rocket.toml.html", "pagePath": "Configuration/Rocket.toml.md" }, { "text": "数据限制", "link": "Configuration/Data-Limits.html", "pagePath": "Configuration/Data-Limits.md" }, { "text": "附加功能", "link": "Configuration/Extras.html", "pagePath": "Configuration/Extras.md" }, { "text": "环境变量", "link": "Configuration/Environment-Variables.html", "pagePath": "Configuration/Environment-Variables.md" }, { "text": "程式化", "link": "Configuration/Programmatic.html", "pagePath": "Configuration/Programmatic.md" }, { "text": "配置TLS", "link": "Configuration/Configuring-TLS.html", "pagePath": "Configuration/Configuring-TLS.md" }] }, { "text": "Pastebin 教程", "children": [{ "text": "成品", "link": "Pastebin/Finished-Product.html", "pagePath": "Pastebin/Finished-Product.md" }, { "text": "入门", "link": "Pastebin/Getting-Started.html", "pagePath": "Pastebin/Getting-Started.md" }, { "text": "主页", "link": "Pastebin/Index.html", "pagePath": "Pastebin/Index.md" }, { "text": "上传", "link": "Pastebin/Uploading.html", "pagePath": "Pastebin/Uploading.md" }, { "text": "检索粘贴", "link": "Pastebin/Retrieving-Pastes.html", "pagePath": "Pastebin/Retrieving-Pastes.md" }, { "text": "总结", "link": "Pastebin/Conclusion.html", "pagePath": "Pastebin/Conclusion.md" }] }, { "text": "总结", "children": [{ "text": "获取帮助", "link": "Conclusion/Getting-Help.html", "pagePath": "Conclusion/Getting-Help.md" }, { "text": "下一步是什么？", "link": "Conclusion/Whats-Next.html", "pagePath": "Conclusion/Whats-Next.md" }] }],
    'prev': { "text": "类型化Uri", "link": "Responses/Typed-URIs.html", "pagePath": "Responses/Typed-URIs.md" },
    'next': { "text": "请求本地状态", "link": "State/Request-Local-State.html", "pagePath": "State/Request-Local-State.md" },
    'config': { "srcDir": "source/_posts", "outDir": "dist", "exclude": ["**/.*", "markdoc.config.json", "LICENSE", "dist"], "baseDir": "/rocketdoc/", "watch": false, "serve": true, "addr": "127.0.0.1:8096", "title": "ROCKET指南", "nav": [{ "text": "首页", "link": "" }], "sidebar": ["README.md", { "text": "简介", "children": ["Introduction/Audience.md", "Introduction/Foreword.md"] }, { "text": "快速开始", "children": ["Quickstart/Running-Examples.md"] }, { "text": "入门", "children": ["Getting-Started/Installing-Rust.md", "Getting-Started/Hello-World.md"] }, { "text": "概述", "children": ["Overview/Lifecycle.md", "Overview/Routing.md", "Overview/Mounting.md", "Overview/Launching.md"] }, { "text": "请求 Requests", "children": ["Requests/Methods.md", "Requests/Dynamic-Paths.md", "Requests/Forwarding.md", "Requests/Query-Strings.md", "Requests/Request-Guards.md", "Requests/Cookies.md", "Requests/Format.md", "Requests/Body-Data.md", "Requests/Error-Catchers.md"] }, { "text": "响应 Responses", "children": ["Responses/Responder.md", "Responses/Custom-Responders.md", "Responses/Implementations.md", "Responses/Rocket-Responders.md", "Responses/Templates.md", "Responses/Typed-URIs.md"] }, { "text": "状态 State", "children": ["State/Managed-State.md", "State/Request-Local-State.md", "State/Databases.md"] }, { "text": "整流罩 Fairings", "children": ["Fairings/Overview.md", "Fairings/Implementing.md", "Fairings/Ad-Hoc-Fairings.md"] }, { "text": "测试", "children": ["Testing/Local-Dispatching.md", "Testing/Validating-Responses.md", "Testing/Testing-Hello-World.md", "Testing/Codegen-Debug.md"] }, { "text": "配置", "children": ["Configuration/Environment.md", "Configuration/Rocket.toml.md", "Configuration/Data-Limits.md", "Configuration/Extras.md", "Configuration/Environment-Variables.md", "Configuration/Programmatic.md", "Configuration/Configuring-TLS.md"] }, { "text": "Pastebin 教程", "children": ["Pastebin/Finished-Product.md", "Pastebin/Getting-Started.md", "Pastebin/Index.md", "Pastebin/Uploading.md", "Pastebin/Retrieving-Pastes.md", "Pastebin/Conclusion.md"] }, { "text": "总结", "children": ["Conclusion/Getting-Help.md", "Conclusion/Whats-Next.md"] }] },
    'pagePath': "State/Managed-State.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "State/Managed-State.html",
    'title': "管理状态",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>状态 State</h1>\n<p>许多Web应用程序都需要维护状态。这可以像维护访问次数计数器一样简单，也可以像需要访问作业队列和多个数据库一样复杂。Rocket提供了以安全，简单的方式实现此类交互的工具。</p>\n<h2 id="托管状态">托管状态<a class="anchor" href="State/Managed-State.html#托管状态">§</a></h2>\n<p>维护状态的启用功能是托管状态。顾名思义，托管状态是Rocket为应用程序管理的状态。状态是按类型管理的：Rocket将最多管理给定类型的一个值。</p>\n<p>使用托管状态的过程很简单：</p>\n<ol>\n<li>使用状态的初始值对与应用程序对应的<code>Rocket</code>实例调用<code>manage</code>。</li>\n<li>将 <code>State&lt;T&gt;</code> 类型添加到任何请求处理程序中，其中<code>T</code>是传递给的值的类型<code>manage</code>。</li>\n</ol>\n<h3 id="注意所有托管状态都必须是线程安全的">**注意：**所有托管状态都必须是线程安全的。<a class="anchor" href="State/Managed-State.html#注意所有托管状态都必须是线程安全的">§</a></h3>\n<p>由于Rocket自动为您的应用程序提供多线程，因此处理程序可以同时访问托管状态。结果，托管状态必须是线程安全的。感谢Rust，通过确保在托管状态下存储的值的类型实现<code>Send</code>+ 来检查此条件<code>Sync</code>。</p>\n<h3 id="添加状态">添加状态<a class="anchor" href="State/Managed-State.html#添加状态">§</a></h3>\n<p>要指示Rocket管理应用程序的状态，请<code>Rocket</code>在的实例上调用<a href="https://api.rocket.rs/v0.4/rocket/struct.Rocket.html#method.manage"><code>manage</code></a>方法。例如，要让Rocket管理<code>HitCount</code>内部结构<code>AtomicUsize</code>的初始值为<code>0</code>，我们可以编写以下代码：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span>atomic<span class="token punctuation">::</span>AtomicUsize<span class="token punctuation">;</span>\n\n<span class="token keyword">struct</span> HitCount <span class="token punctuation">{</span>\n    count<span class="token punctuation">:</span> AtomicUsize\n<span class="token punctuation">}</span>\n\nrocket<span class="token punctuation">::</span><span class="token function">ignite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">manage</span><span class="token punctuation">(</span>HitCount <span class="token punctuation">{</span> count<span class="token punctuation">:</span> AtomicUsize<span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>只要每次调用引用不同类型的值，<code>manage</code>方法就可以调用任意次数。例如，要让Rocket同时管理<code>HitCount</code>值和<code>Config</code>值，我们可以编写：</p>\n<pre class="language-rust"><code class="language-rust">rocket<span class="token punctuation">::</span><span class="token function">ignite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">manage</span><span class="token punctuation">(</span>HitCount <span class="token punctuation">{</span> count<span class="token punctuation">:</span> AtomicUsize<span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">manage</span><span class="token punctuation">(</span>Config<span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>user_input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="检索状态">检索状态<a class="anchor" href="State/Managed-State.html#检索状态">§</a></h3>\n<p>可以通过以下<a href="https://api.rocket.rs/v0.4/rocket/struct.State.html"><code>State</code></a>类型来检索由Rocket 管理的状态：托管状态的<a href="https://rocket.rs/v0.4/guide/requests/#request-guards">请求防护</a>。要使用请求防护，请将<code>State</code>类型添加到任何请求处理程序中，其中<code>T</code>是托管状态的类型。例如，我们可以检索和当前响应<code>HitCount</code>的<code>count</code>路线如下：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> rocket<span class="token punctuation">::</span>State<span class="token punctuation">;</span>\n\n<span class="token attribute attr-name">#[get(<span class="token string">"/count"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">count</span><span class="token punctuation">(</span>hit_count<span class="token punctuation">:</span> State<span class="token operator">&lt;</span>HitCount<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> current_count <span class="token operator">=</span> hit_count<span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">::</span>Relaxed<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"Number of visits: {}"</span><span class="token punctuation">,</span> current_count<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>您也可以<code>State</code>在一条路线中检索多个类型：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/state"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">state</span><span class="token punctuation">(</span>hit_count<span class="token punctuation">:</span> State<span class="token operator">&lt;</span>HitCount<span class="token operator">></span><span class="token punctuation">,</span> config<span class="token punctuation">:</span> State<span class="token operator">&lt;</span>Config<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> T <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>\n</code></pre>\n<h3 id="警告">警告<a class="anchor" href="State/Managed-State.html#警告">§</a></h3>\n<p>如果您请求一个未被管理(<code>managed</code>)的<code>T</code>的<code>State&lt;T&gt;</code>，Rocket将不会调用违规的路由。相反，Rocket将记录一条错误消息并向客户端返回500个错误。</p>\n<p>您可以<a href="https://github.com/SergioBenitez/Rocket/tree/v0.4/examples/state">在GitHub上</a><code>HitCount</code>的<a href="https://github.com/SergioBenitez/Rocket/tree/v0.4/examples/state">状态</a>示例中使用该结构找到完整的示例，并在API文档中了解有关该<a href="https://api.rocket.rs/v0.4/rocket/struct.Rocket.html#method.manage"><code>manage</code>方法</a>和<a href="https://api.rocket.rs/v0.4/rocket/struct.State.html"><code>State</code>类型的</a>更多信息。</p>\n<h3 id="防护内">防护内<a class="anchor" href="State/Managed-State.html#防护内">§</a></h3>\n<p>从<code>FromRequest</code>实现中检索托管状态也很有用。为此，只需<code>State</code>使用<a href="https://api.rocket.rs/v0.4/rocket/struct.Request.html#method.guard"><code>Request::guard()</code></a>方法将其作为防护来调用。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">from_request</span><span class="token punctuation">(</span>req<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">\'a</span> Request<span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'r</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> request<span class="token punctuation">::</span>Outcome<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> hit_count_state <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">guard</span><span class="token punctuation">::</span><span class="token operator">&lt;</span>State<span class="token operator">&lt;</span>HitCount<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> current_count <span class="token operator">=</span> hit_count_state<span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">::</span>Relaxed<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">...</span>\n<span class="token punctuation">}</span>\n</code></pre>'
        } }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "index.js" })),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="State/Managed-State.html#托管状态">托管状态</a><ol><li><a href="State/Managed-State.html#注意所有托管状态都必须是线程安全的">**注意：**所有托管状态都必须是线程安全的。</a></li><li><a href="State/Managed-State.html#添加状态">添加状态</a></li><li><a href="State/Managed-State.html#检索状态">检索状态</a></li><li><a href="State/Managed-State.html#警告">警告</a></li><li><a href="State/Managed-State.html#防护内">防护内</a></li></ol></li></ol></nav>'
        } }),
    'layout': "default",
    'id': "Managed-State"
};
