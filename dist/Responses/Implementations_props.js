
export default {
    'sidebar': [{ "text": "Rocket编程指南", "link": "", "pagePath": "README.md" }, { "text": "简介", "children": [{ "text": "读者", "link": "Introduction/Audience.html", "pagePath": "Introduction/Audience.md" }, { "text": "前言", "link": "Introduction/Foreword.html", "pagePath": "Introduction/Foreword.md" }] }, { "text": "快速开始", "children": [{ "text": "运行示例", "link": "Quickstart/Running-Examples.html", "pagePath": "Quickstart/Running-Examples.md" }] }, { "text": "入门", "children": [{ "text": "安装 Rust", "link": "Getting-Started/Installing-Rust.html", "pagePath": "Getting-Started/Installing-Rust.md" }, { "text": "你好，世界！", "link": "Getting-Started/Hello-World.html", "pagePath": "Getting-Started/Hello-World.md" }] }, { "text": "概述", "children": [{ "text": "生命周期", "link": "Overview/Lifecycle.html", "pagePath": "Overview/Lifecycle.md" }, { "text": "路由", "link": "Overview/Routing.html", "pagePath": "Overview/Routing.md" }, { "text": "挂载", "link": "Overview/Mounting.html", "pagePath": "Overview/Mounting.md" }, { "text": "启动", "link": "Overview/Launching.html", "pagePath": "Overview/Launching.md" }] }, { "text": "请求 Requests", "children": [{ "text": "方法", "link": "Requests/Methods.html", "pagePath": "Requests/Methods.md" }, { "text": "动态路径", "link": "Requests/Dynamic-Paths.html", "pagePath": "Requests/Dynamic-Paths.md" }, { "text": "匹配转发", "link": "Requests/Forwarding.html", "pagePath": "Requests/Forwarding.md" }, { "text": "查询字符串", "link": "Requests/Query-Strings.html", "pagePath": "Requests/Query-Strings.md" }, { "text": "请求防护", "link": "Requests/Request-Guards.html", "pagePath": "Requests/Request-Guards.md" }, { "text": "Cookies", "link": "Requests/Cookies.html", "pagePath": "Requests/Cookies.md" }, { "text": "格式", "link": "Requests/Format.html", "pagePath": "Requests/Format.md" }, { "text": "正文数据", "link": "Requests/Body-Data.html", "pagePath": "Requests/Body-Data.md" }, { "text": "你好，世界！", "link": "Requests/Error-Catchers.html", "pagePath": "Requests/Error-Catchers.md" }] }, { "text": "响应 Responses", "children": [{ "text": "响应器", "link": "Responses/Responder.html", "pagePath": "Responses/Responder.md" }, { "text": "自定义响应器", "link": "Responses/Custom-Responders.html", "pagePath": "Responses/Custom-Responders.md" }, { "text": "实现响应器", "link": "Responses/Implementations.html", "pagePath": "Responses/Implementations.md" }, { "text": "Rocket响应器", "link": "Responses/Rocket-Responders.html", "pagePath": "Responses/Rocket-Responders.md" }, { "text": "模板", "link": "Responses/Templates.html", "pagePath": "Responses/Templates.md" }, { "text": "类型化Uri", "link": "Responses/Typed-URIs.html", "pagePath": "Responses/Typed-URIs.md" }] }, { "text": "状态 State", "children": [{ "text": "管理状态", "link": "State/Managed-State.html", "pagePath": "State/Managed-State.md" }, { "text": "请求本地状态", "link": "State/Request-Local-State.html", "pagePath": "State/Request-Local-State.md" }, { "text": "数据库", "link": "State/Databases.html", "pagePath": "State/Databases.md" }] }, { "text": "整流罩 Fairings", "children": [{ "text": "概述", "link": "Fairings/Overview.html", "pagePath": "Fairings/Overview.md" }, { "text": "实现", "link": "Fairings/Implementing.html", "pagePath": "Fairings/Implementing.md" }, { "text": "临时 Fairings", "link": "Fairings/Ad-Hoc-Fairings.html", "pagePath": "Fairings/Ad-Hoc-Fairings.md" }] }, { "text": "测试", "children": [{ "text": "本地调试", "link": "Testing/Local-Dispatching.html", "pagePath": "Testing/Local-Dispatching.md" }, { "text": "验证响应", "link": "Testing/Validating-Responses.html", "pagePath": "Testing/Validating-Responses.md" }, { "text": "测试 Hello World！", "link": "Testing/Testing-Hello-World.html", "pagePath": "Testing/Testing-Hello-World.md" }, { "text": "代码生成调试", "link": "Testing/Codegen-Debug.html", "pagePath": "Testing/Codegen-Debug.md" }] }, { "text": "配置", "children": [{ "text": "环境", "link": "Configuration/Environment.html", "pagePath": "Configuration/Environment.md" }, { "text": "Rocket配置文件", "link": "Configuration/Rocket.toml.html", "pagePath": "Configuration/Rocket.toml.md" }, { "text": "数据限制", "link": "Configuration/Data-Limits.html", "pagePath": "Configuration/Data-Limits.md" }, { "text": "附加功能", "link": "Configuration/Extras.html", "pagePath": "Configuration/Extras.md" }, { "text": "环境变量", "link": "Configuration/Environment-Variables.html", "pagePath": "Configuration/Environment-Variables.md" }, { "text": "程式化", "link": "Configuration/Programmatic.html", "pagePath": "Configuration/Programmatic.md" }, { "text": "配置TLS", "link": "Configuration/Configuring-TLS.html", "pagePath": "Configuration/Configuring-TLS.md" }] }, { "text": "Pastebin 教程", "children": [{ "text": "成品", "link": "Pastebin/Finished-Product.html", "pagePath": "Pastebin/Finished-Product.md" }, { "text": "入门", "link": "Pastebin/Getting-Started.html", "pagePath": "Pastebin/Getting-Started.md" }, { "text": "主页", "link": "Pastebin/Index.html", "pagePath": "Pastebin/Index.md" }, { "text": "上传", "link": "Pastebin/Uploading.html", "pagePath": "Pastebin/Uploading.md" }, { "text": "检索粘贴", "link": "Pastebin/Retrieving-Pastes.html", "pagePath": "Pastebin/Retrieving-Pastes.md" }, { "text": "总结", "link": "Pastebin/Conclusion.html", "pagePath": "Pastebin/Conclusion.md" }] }, { "text": "总结", "children": [{ "text": "获取帮助", "link": "Conclusion/Getting-Help.html", "pagePath": "Conclusion/Getting-Help.md" }, { "text": "下一步是什么？", "link": "Conclusion/Whats-Next.html", "pagePath": "Conclusion/Whats-Next.md" }] }],
    'prev': { "text": "自定义响应器", "link": "Responses/Custom-Responders.html", "pagePath": "Responses/Custom-Responders.md" },
    'next': { "text": "Rocket响应器", "link": "Responses/Rocket-Responders.html", "pagePath": "Responses/Rocket-Responders.md" },
    'config': { "srcDir": "source/_posts", "outDir": "dist", "exclude": ["**/.*", "markdoc.config.json", "LICENSE", "dist"], "baseDir": "/rocketdoc/", "watch": false, "serve": true, "addr": "127.0.0.1:8096", "title": "ROCKET指南", "nav": [{ "text": "首页", "link": "" }], "sidebar": ["README.md", { "text": "简介", "children": ["Introduction/Audience.md", "Introduction/Foreword.md"] }, { "text": "快速开始", "children": ["Quickstart/Running-Examples.md"] }, { "text": "入门", "children": ["Getting-Started/Installing-Rust.md", "Getting-Started/Hello-World.md"] }, { "text": "概述", "children": ["Overview/Lifecycle.md", "Overview/Routing.md", "Overview/Mounting.md", "Overview/Launching.md"] }, { "text": "请求 Requests", "children": ["Requests/Methods.md", "Requests/Dynamic-Paths.md", "Requests/Forwarding.md", "Requests/Query-Strings.md", "Requests/Request-Guards.md", "Requests/Cookies.md", "Requests/Format.md", "Requests/Body-Data.md", "Requests/Error-Catchers.md"] }, { "text": "响应 Responses", "children": ["Responses/Responder.md", "Responses/Custom-Responders.md", "Responses/Implementations.md", "Responses/Rocket-Responders.md", "Responses/Templates.md", "Responses/Typed-URIs.md"] }, { "text": "状态 State", "children": ["State/Managed-State.md", "State/Request-Local-State.md", "State/Databases.md"] }, { "text": "整流罩 Fairings", "children": ["Fairings/Overview.md", "Fairings/Implementing.md", "Fairings/Ad-Hoc-Fairings.md"] }, { "text": "测试", "children": ["Testing/Local-Dispatching.md", "Testing/Validating-Responses.md", "Testing/Testing-Hello-World.md", "Testing/Codegen-Debug.md"] }, { "text": "配置", "children": ["Configuration/Environment.md", "Configuration/Rocket.toml.md", "Configuration/Data-Limits.md", "Configuration/Extras.md", "Configuration/Environment-Variables.md", "Configuration/Programmatic.md", "Configuration/Configuring-TLS.md"] }, { "text": "Pastebin 教程", "children": ["Pastebin/Finished-Product.md", "Pastebin/Getting-Started.md", "Pastebin/Index.md", "Pastebin/Uploading.md", "Pastebin/Retrieving-Pastes.md", "Pastebin/Conclusion.md"] }, { "text": "总结", "children": ["Conclusion/Getting-Help.md", "Conclusion/Whats-Next.md"] }] },
    'pagePath': "Responses/Implementations.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "Responses/Implementations.html",
    'title': "实现响应器",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="实现响应器">实现响应器<a class="anchor" href="Responses/Implementations.html#实现响应器">§</a></h2>\n<p>Rocket工具<code>Responder</code>为多种类型的鲁斯特的标准库，包括<code>String</code>，<code>&amp;str</code>，<code>File</code>，<code>Option</code>，和<code>Result</code>。该<a href="https://api.rocket.rs/v0.4/rocket/response/trait.Responder.html"><code>Responder</code></a>文档描述了这些详细，但我们简单介绍几个在这里。</p>\n<h3 id="字符串">字符串<a class="anchor" href="Responses/Implementations.html#字符串">§</a></h3>\n<p><code>&amp;str</code> 和 <code>String</code> 的 <code>Responder</code> 实现是直截了当的：字符串用作大小合适的主体，响应的内容类型设置为 <code>text/plain</code>。要了解这样一个 <code>Responder</code> 实现的外观，以下是<code>String</code>的实现：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">impl</span> Responder<span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'static</span><span class="token operator">></span> <span class="token keyword">for</span> String <span class="token punctuation">{</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">respond_to</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> _<span class="token punctuation">:</span> <span class="token operator">&amp;</span>Request<span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>Response<span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'static</span><span class="token operator">></span><span class="token punctuation">,</span> Status<span class="token operator">></span> <span class="token punctuation">{</span>\n        Response<span class="token punctuation">::</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">::</span>Plain<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">sized_body</span><span class="token punctuation">(</span>Cursor<span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>由于这些实现，您可以直接从处理程序中返回 <code>&amp;str</code>或<code>String</code>类型：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/string"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">\'static</span> str <span class="token punctuation">{</span>\n    <span class="token string">"Hello there! I\'m a string!"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="option"><code>Option</code><a class="anchor" href="Responses/Implementations.html#option">§</a></h4>\n<p><code>Option</code>是包装响应器：只有在<code>T</code>实现器时才能返回 <code>Option&lt;T&gt;</code> 。如果 <code>Option</code> 为 <code>Some</code>，则使用包装的响应程序响应客户端。否则，将向客户端返回 <strong>404 - Not Found</strong> 错误。</p>\n<p>此实现使 <code>Option</code> 在不知道处理时间是否存在内容之前返回一种方便的类型。例如，由于 <code>Option</code>的缘故，我们可以实现一个文件服务器，在找到文件时返回 <code>200</code> ，而在仅4行惯用行中没有找到文件时返回 <code>404</code> ：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/&lt;file..>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">files</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> PathBuf<span class="token punctuation">)</span> <span class="token punctuation">-></span> Option<span class="token operator">&lt;</span>NamedFile<span class="token operator">></span> <span class="token punctuation">{</span>\n    NamedFile<span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span>Path<span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"static/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="result"><code>Result</code><a class="anchor" href="Responses/Implementations.html#result">§</a></h4>\n<p><code>Result</code>是一种特殊的包装响应器：其功能取决于错误类型<code>E</code>是否实现<code>Responder</code>。</p>\n<p>当错误类型<code>E</code>实现时<code>Responder</code>，使用包裹<code>Responder</code>在中的<code>Ok</code>或<code>Err</code>（可能是其中的任意一个）来响应客户端。这意味着可以在运行时动态选择响应器，并且可以根据情况使用两种不同类型的响应。例如，重新访问文件服务器，我们可能希望在找不到文件时向用户提供更多反馈。我们可以这样进行：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> rocket<span class="token punctuation">::</span>response<span class="token punctuation">::</span>status<span class="token punctuation">::</span>NotFound<span class="token punctuation">;</span>\n\n<span class="token attribute attr-name">#[get(<span class="token string">"/&lt;file..>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">files</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> PathBuf<span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>NamedFile<span class="token punctuation">,</span> NotFound<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> path <span class="token operator">=</span> Path<span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"static/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    NamedFile<span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> NotFound<span class="token punctuation">(</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"Bad path: {}"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>如果错误类型<code>E</code> <em>未</em>实现<code>Responder</code>，则使用该<code>Debug</code>实现将错误简单地记录到控制台，然后将<code>500</code>错误返回给客户端。</p>'
        } }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "index.js" })),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="Responses/Implementations.html#实现响应器">实现响应器</a><ol><li><a href="Responses/Implementations.html#字符串">字符串</a><ol></ol></li></ol></li></ol></nav>'
        } }),
    'layout': "default",
    'id': "Implementations"
};
