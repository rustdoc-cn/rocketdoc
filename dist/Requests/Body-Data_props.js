
export default {
    'sidebar': [{ "text": "Rocket编程指南", "link": "", "pagePath": "README.md" }, { "text": "简介", "children": [{ "text": "读者", "link": "Introduction/Audience.html", "pagePath": "Introduction/Audience.md" }, { "text": "前言", "link": "Introduction/Foreword.html", "pagePath": "Introduction/Foreword.md" }] }, { "text": "快速开始", "children": [{ "text": "运行示例", "link": "Quickstart/Running-Examples.html", "pagePath": "Quickstart/Running-Examples.md" }] }, { "text": "入门", "children": [{ "text": "安装 Rust", "link": "Getting-Started/Installing-Rust.html", "pagePath": "Getting-Started/Installing-Rust.md" }, { "text": "你好，世界！", "link": "Getting-Started/Hello-World.html", "pagePath": "Getting-Started/Hello-World.md" }] }, { "text": "概述", "children": [{ "text": "生命周期", "link": "Overview/Lifecycle.html", "pagePath": "Overview/Lifecycle.md" }, { "text": "路由", "link": "Overview/Routing.html", "pagePath": "Overview/Routing.md" }, { "text": "挂载", "link": "Overview/Mounting.html", "pagePath": "Overview/Mounting.md" }, { "text": "启动", "link": "Overview/Launching.html", "pagePath": "Overview/Launching.md" }] }, { "text": "请求 Requests", "children": [{ "text": "方法", "link": "Requests/Methods.html", "pagePath": "Requests/Methods.md" }, { "text": "动态路径", "link": "Requests/Dynamic-Paths.html", "pagePath": "Requests/Dynamic-Paths.md" }, { "text": "匹配转发", "link": "Requests/Forwarding.html", "pagePath": "Requests/Forwarding.md" }, { "text": "查询字符串", "link": "Requests/Query-Strings.html", "pagePath": "Requests/Query-Strings.md" }, { "text": "请求防护", "link": "Requests/Request-Guards.html", "pagePath": "Requests/Request-Guards.md" }, { "text": "Cookies", "link": "Requests/Cookies.html", "pagePath": "Requests/Cookies.md" }, { "text": "格式", "link": "Requests/Format.html", "pagePath": "Requests/Format.md" }, { "text": "正文数据", "link": "Requests/Body-Data.html", "pagePath": "Requests/Body-Data.md" }, { "text": "你好，世界！", "link": "Requests/Error-Catchers.html", "pagePath": "Requests/Error-Catchers.md" }] }, { "text": "响应 Responses", "children": [{ "text": "响应器", "link": "Responses/Responder.html", "pagePath": "Responses/Responder.md" }, { "text": "自定义响应器", "link": "Responses/Custom-Responders.html", "pagePath": "Responses/Custom-Responders.md" }, { "text": "实现响应器", "link": "Responses/Implementations.html", "pagePath": "Responses/Implementations.md" }, { "text": "Rocket响应器", "link": "Responses/Rocket-Responders.html", "pagePath": "Responses/Rocket-Responders.md" }, { "text": "模板", "link": "Responses/Templates.html", "pagePath": "Responses/Templates.md" }, { "text": "类型化Uri", "link": "Responses/Typed-URIs.html", "pagePath": "Responses/Typed-URIs.md" }] }, { "text": "状态 State", "children": [{ "text": "管理状态", "link": "State/Managed-State.html", "pagePath": "State/Managed-State.md" }, { "text": "请求本地状态", "link": "State/Request-Local-State.html", "pagePath": "State/Request-Local-State.md" }, { "text": "数据库", "link": "State/Databases.html", "pagePath": "State/Databases.md" }] }, { "text": "整流罩 Fairings", "children": [{ "text": "概述", "link": "Fairings/Overview.html", "pagePath": "Fairings/Overview.md" }, { "text": "实现", "link": "Fairings/Implementing.html", "pagePath": "Fairings/Implementing.md" }, { "text": "临时 Fairings", "link": "Fairings/Ad-Hoc-Fairings.html", "pagePath": "Fairings/Ad-Hoc-Fairings.md" }] }, { "text": "测试", "children": [{ "text": "本地调试", "link": "Testing/Local-Dispatching.html", "pagePath": "Testing/Local-Dispatching.md" }, { "text": "验证响应", "link": "Testing/Validating-Responses.html", "pagePath": "Testing/Validating-Responses.md" }, { "text": "测试 Hello World！", "link": "Testing/Testing-Hello-World.html", "pagePath": "Testing/Testing-Hello-World.md" }, { "text": "代码生成调试", "link": "Testing/Codegen-Debug.html", "pagePath": "Testing/Codegen-Debug.md" }] }, { "text": "配置", "children": [{ "text": "环境", "link": "Configuration/Environment.html", "pagePath": "Configuration/Environment.md" }, { "text": "Rocket配置文件", "link": "Configuration/Rocket.toml.html", "pagePath": "Configuration/Rocket.toml.md" }, { "text": "数据限制", "link": "Configuration/Data-Limits.html", "pagePath": "Configuration/Data-Limits.md" }, { "text": "附加功能", "link": "Configuration/Extras.html", "pagePath": "Configuration/Extras.md" }, { "text": "环境变量", "link": "Configuration/Environment-Variables.html", "pagePath": "Configuration/Environment-Variables.md" }, { "text": "程式化", "link": "Configuration/Programmatic.html", "pagePath": "Configuration/Programmatic.md" }, { "text": "配置TLS", "link": "Configuration/Configuring-TLS.html", "pagePath": "Configuration/Configuring-TLS.md" }] }, { "text": "Pastebin 教程", "children": [{ "text": "成品", "link": "Pastebin/Finished-Product.html", "pagePath": "Pastebin/Finished-Product.md" }, { "text": "入门", "link": "Pastebin/Getting-Started.html", "pagePath": "Pastebin/Getting-Started.md" }, { "text": "主页", "link": "Pastebin/Index.html", "pagePath": "Pastebin/Index.md" }, { "text": "上传", "link": "Pastebin/Uploading.html", "pagePath": "Pastebin/Uploading.md" }, { "text": "检索粘贴", "link": "Pastebin/Retrieving-Pastes.html", "pagePath": "Pastebin/Retrieving-Pastes.md" }, { "text": "总结", "link": "Pastebin/Conclusion.html", "pagePath": "Pastebin/Conclusion.md" }] }, { "text": "总结", "children": [{ "text": "获取帮助", "link": "Conclusion/Getting-Help.html", "pagePath": "Conclusion/Getting-Help.md" }, { "text": "下一步是什么？", "link": "Conclusion/Whats-Next.html", "pagePath": "Conclusion/Whats-Next.md" }] }],
    'prev': { "text": "格式", "link": "Requests/Format.html", "pagePath": "Requests/Format.md" },
    'next': { "text": "你好，世界！", "link": "Requests/Error-Catchers.html", "pagePath": "Requests/Error-Catchers.md" },
    'config': { "srcDir": "source/_posts", "outDir": "dist", "exclude": ["**/.*", "markdoc.config.json", "LICENSE", "dist"], "baseDir": "/rocketdoc/", "watch": false, "serve": true, "addr": "127.0.0.1:8096", "title": "ROCKET指南", "nav": [{ "text": "首页", "link": "" }], "sidebar": ["README.md", { "text": "简介", "children": ["Introduction/Audience.md", "Introduction/Foreword.md"] }, { "text": "快速开始", "children": ["Quickstart/Running-Examples.md"] }, { "text": "入门", "children": ["Getting-Started/Installing-Rust.md", "Getting-Started/Hello-World.md"] }, { "text": "概述", "children": ["Overview/Lifecycle.md", "Overview/Routing.md", "Overview/Mounting.md", "Overview/Launching.md"] }, { "text": "请求 Requests", "children": ["Requests/Methods.md", "Requests/Dynamic-Paths.md", "Requests/Forwarding.md", "Requests/Query-Strings.md", "Requests/Request-Guards.md", "Requests/Cookies.md", "Requests/Format.md", "Requests/Body-Data.md", "Requests/Error-Catchers.md"] }, { "text": "响应 Responses", "children": ["Responses/Responder.md", "Responses/Custom-Responders.md", "Responses/Implementations.md", "Responses/Rocket-Responders.md", "Responses/Templates.md", "Responses/Typed-URIs.md"] }, { "text": "状态 State", "children": ["State/Managed-State.md", "State/Request-Local-State.md", "State/Databases.md"] }, { "text": "整流罩 Fairings", "children": ["Fairings/Overview.md", "Fairings/Implementing.md", "Fairings/Ad-Hoc-Fairings.md"] }, { "text": "测试", "children": ["Testing/Local-Dispatching.md", "Testing/Validating-Responses.md", "Testing/Testing-Hello-World.md", "Testing/Codegen-Debug.md"] }, { "text": "配置", "children": ["Configuration/Environment.md", "Configuration/Rocket.toml.md", "Configuration/Data-Limits.md", "Configuration/Extras.md", "Configuration/Environment-Variables.md", "Configuration/Programmatic.md", "Configuration/Configuring-TLS.md"] }, { "text": "Pastebin 教程", "children": ["Pastebin/Finished-Product.md", "Pastebin/Getting-Started.md", "Pastebin/Index.md", "Pastebin/Uploading.md", "Pastebin/Retrieving-Pastes.md", "Pastebin/Conclusion.md"] }, { "text": "总结", "children": ["Conclusion/Getting-Help.md", "Conclusion/Whats-Next.md"] }] },
    'pagePath': "Requests/Body-Data.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "Requests/Body-Data.html",
    'title': "正文数据",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="正文数据">正文数据<a class="anchor" href="Requests/Body-Data.html#正文数据">§</a></h2>\n<p>身体数据处理，像许多火箭一样，是类型导向的。若要指示处理程序需要正文数据，请使用<code>data=“&lt;param&gt;”</code>对其进行批注，其中<code>param</code>是处理程序中的参数。参数的类型必须实现<code>FromData</code>特性。看起来像这样，假设T实现<code>FromData</code>：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[post(<span class="token string">"/"</span>, data = <span class="token string">"&lt;input>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>\n</code></pre>\n<p>实现<code>FromData</code>的任何类型也称为数据保护。</p>\n<h3 id="表单">表单<a class="anchor" href="Requests/Body-Data.html#表单">§</a></h3>\n<p>表单是web应用程序中处理的最常见的数据类型之一，Rocket使处理它们变得简单。假设您的应用程序正在为新的<code>todo</code>任务处理表单提交。表单包含两个字段：<code>complete</code>复选框和<code>description</code>、文本字段。您可以轻松地在Rocket中处理表单请求，如下所示：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(FromForm)]</span>\n<span class="token keyword">struct</span> Task <span class="token punctuation">{</span>\n    complete<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>\n    description<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[post(<span class="token string">"/todo"</span>, data = <span class="token string">"&lt;task>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>task<span class="token punctuation">:</span> Form<span class="token operator">&lt;</span>Task<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>\n</code></pre>\n<p>只要 <a href="https://api.rocket.rs/v0.4/rocket/request/struct.Form.html"><code>Form</code></a> 类型的泛型参数实现<a href="https://api.rocket.rs/v0.4/rocket/request/trait.FromForm.html"><code>FromForm</code></a>特征，它就实现<code>FromData</code>特征。在这个例子中，我们为任务结构自动派生了<code>FromForm</code>特征。对于字段实现<a href="https://api.rocket.rs/v0.4/rocket/request/trait.FromFormValue.html"><code>FromFormValue</code></a>的任何结构，都可以派生<code>FromForm</code>。如果<code>POST/todo</code>请求到达，表单数据将自动解析为 <code>Task</code> 结构。如果到达的数据不是正确的内容类型，则会转发请求。如果数据不解析或只是无效，则返回可自定义的<code>400错误请求</code>或<code>422不可处理的实体</code>错误。与以前一样，可以使用选项和结果类型捕获转发或失败：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[post(<span class="token string">"/todo"</span>, data = <span class="token string">"&lt;task>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>task<span class="token punctuation">:</span> Option<span class="token operator">&lt;</span>Form<span class="token operator">&lt;</span>Task<span class="token operator">>></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>\n</code></pre>\n<h4 id="宽松解析">宽松解析<a class="anchor" href="Requests/Body-Data.html#宽松解析">§</a></h4>\n<p>Rocket的<code>FromForm</code>解析在默认情况下是严格的。换句话说，只有当表单包含<code>T</code>中的确切字段集时， <code>Form&lt;T&gt;</code> 才能从传入表单成功解析。换句话说， <code>Form&lt;T&gt;</code> 将在缺少和/或额外字段时出错。例如，如果传入表单包含字段“a”、“b”和“c”，而<code>T</code>仅包含“a”和“c”，则该表单将不会解析为<code>form&lt;T&gt;</code>。</p>\n<p>Rocket允许您通过 <a href="https://api.rocket.rs/v0.4/rocket/request/struct.LenientForm.html"><code>LenientForm</code></a> 数据类型选择退出此行为。只要表单包含<code>T</code>中字段的超集，<code>LenientForm&lt;T&gt;</code>就会从传入表单成功解析。换句话说，<code>LenientForm&lt;T&gt;</code>会自动丢弃多余的字段，而不会出错。例如，如果传入表单包含字段“a”、“b”和“c”，而T仅包含“a”和“c”，则该表单将解析为<code>LenientForm&lt;T&gt;</code>。</p>\n<p>你可以在任何你想使用的地方使用一个<code>LenientForm</code>。它的泛型参数也是实现<code>FromForm</code>所必需的。例如，我们可以简单地将上面的<code>Form</code>替换为<code>LenientForm</code>，以获得宽松的解析：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(FromForm)]</span>\n<span class="token keyword">struct</span> Task <span class="token punctuation">{</span> <span class="token punctuation">..</span> <span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[post(<span class="token string">"/todo"</span>, data = <span class="token string">"&lt;task>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>task<span class="token punctuation">:</span> LenientForm<span class="token operator">&lt;</span>Task<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">..</span> <span class="token punctuation">}</span>\n</code></pre>\n<h4 id="字段重命名">字段重命名<a class="anchor" href="Requests/Body-Data.html#字段重命名">§</a></h4>\n<p>默认情况下，Rocket将传入表单字段的名称与结构字段的名称匹配。虽然这种行为是典型的，但也可能需要在按预期解析表单字段和结构字段时使用不同的名称。通过使用 <code>#[form(field = &quot;name&quot;)]</code>字段注释，您可以要求Rocket为给定的结构字段查找不同的表单字段。</p>\n<p>例如，假设您正在编写一个从外部服务接收数据的应用程序。外部服务发布一个名为<code>type</code>的字段的表单。由于<code>type</code>是Rust中的保留关键字，因此不能用作字段的名称。要解决此问题，可以使用字段重命名，如下所示：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(FromForm)]</span>\n<span class="token keyword">struct</span> External <span class="token punctuation">{</span>\n    <span class="token attribute attr-name">#[form(field = <span class="token string">"type"</span>)]</span>\n    api_type<span class="token punctuation">:</span> String\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Rocket将自动将名为<code>type</code>的表单字段与名为<code>api_type</code>的结构字段匹配。</p>\n<h4 id="字段验证">字段验证<a class="anchor" href="Requests/Body-Data.html#字段验证">§</a></h4>\n<p>表单字段可以通过 <a href="https://api.rocket.rs/v0.4/rocket/request/trait.FromFormValue.html"><code>FromFormValue</code></a> 特性的实现轻松验证。例如，如果要验证窗体中某个用户的年龄是否超过某个年龄，则可以定义新的<code>AdultAge</code>类型，将其用作窗体结构中的字段，并实现<code>FromFormValue</code>，以便它只验证超过该年龄的整数：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">struct</span> AdultAge<span class="token punctuation">(</span><span class="token keyword">usize</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'v</span><span class="token operator">></span> FromFormValue<span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">\'v</span><span class="token operator">></span> <span class="token keyword">for</span> AdultAge <span class="token punctuation">{</span>\n    <span class="token keyword">type</span> Error <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">\'v</span> RawStr<span class="token punctuation">;</span>\n\n    <span class="token keyword">fn</span> <span class="token function-definition function">from_form_value</span><span class="token punctuation">(</span>form_value<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">\'v</span> RawStr<span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>AdultAge<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">\'v</span> RawStr<span class="token operator">></span> <span class="token punctuation">{</span>\n        <span class="token keyword">match</span> form_value<span class="token punctuation">.</span>parse<span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            Ok<span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">21</span> <span class="token operator">=></span> Ok<span class="token punctuation">(</span>AdultAge<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            _ <span class="token operator">=></span> Err<span class="token punctuation">(</span>form_value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[derive(FromForm)]</span>\n<span class="token keyword">struct</span> Person <span class="token punctuation">{</span>\n    age<span class="token punctuation">:</span> AdultAge\n<span class="token punctuation">}</span>\n</code></pre>\n<p>如果表单的提交年龄不正确，Rocket将不会调用需要该结构的有效表单的处理程序。可以对字段使用 <code>Option</code> 或<code>Result</code>类型来捕获分析失败：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(FromForm)]</span>\n<span class="token keyword">struct</span> Person <span class="token punctuation">{</span>\n    age<span class="token punctuation">:</span> Option<span class="token operator">&lt;</span>AdultAge<span class="token operator">></span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>对于具有空字段的枚举，还可以派生<code>FromFormValue</code>特性：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(FromFormValue)]</span>\n<span class="token keyword">enum</span> MyValue <span class="token punctuation">{</span>\n    First<span class="token punctuation">,</span>\n    Second<span class="token punctuation">,</span>\n    Third<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>派生为修饰的枚举生成<code>FromFormValue</code>特性的实现。当表单值与变量名的字符串化版本匹配（大小写无关）并返回所述变量的实例时，实现将成功返回。</p>\n<p><a href="https://github.com/SergioBenitez/Rocket/tree/v0.4/examples/form_validation">form validation</a> 和 <a href="https://github.com/SergioBenitez/Rocket/tree/v0.4/examples/form_kitchen_sink">form kitchen sink</a> 示例提供了进一步的说明。</p>\n<h3 id="json">JSON<a class="anchor" href="Requests/Body-Data.html#json">§</a></h3>\n<p>处理<code>JSON</code>数据并不困难：只需使用 <a href="https://api.rocket.rs/v0.4/rocket_contrib/"><code>rocket_contrib</code></a>中的 <a href="https://api.rocket.rs/v0.4/rocket_contrib/json/struct.Json.html"><code>Json</code></a> 类型：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Deserialize)]</span>\n<span class="token keyword">struct</span> Task <span class="token punctuation">{</span>\n    description<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n    complete<span class="token punctuation">:</span> <span class="token keyword">bool</span>\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[post(<span class="token string">"/todo"</span>, data = <span class="token string">"&lt;task>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>task<span class="token punctuation">:</span> Json<span class="token operator">&lt;</span>Task<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>\n</code></pre>\n<p>唯一的条件是<code>Json</code>中的泛型类型实现 <a href="https://github.com/serde-rs/json">Serde</a> 的 <code>Deserialize</code> 特性。有关完整的示例，请参见GitHub上的 <a href="https://github.com/SergioBenitez/Rocket/tree/v0.4/examples/json">JSON 示例</a>。</p>\n<h4 id="流">流<a class="anchor" href="Requests/Body-Data.html#流">§</a></h4>\n<p>有时您只想直接处理传入的数据。例如，您可能希望将传入的数据流输出到文件。Rocket通过 <a href="https://api.rocket.rs/v0.4/rocket/data/struct.Data.html"><code>Data</code></a>类型使此操作尽可能简单：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[post(<span class="token string">"/upload"</span>, format = <span class="token string">"plain"</span>, data = <span class="token string">"&lt;data>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">upload</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> Data<span class="token punctuation">)</span> <span class="token punctuation">-></span> io<span class="token punctuation">::</span>Result<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>\n    data<span class="token punctuation">.</span><span class="token function">stream_to_file</span><span class="token punctuation">(</span><span class="token string">"/tmp/upload.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> n<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>上面的路由接受对 <code>/upload</code>  路径的任何<code>POST</code>请求， <code>Content-Type: text/plain</code> 传入的数据流输出到<code>tmp/upload.txt</code>，如果上传成功，写入的字节数将作为纯文本响应返回。如果上载失败，则返回错误响应。以上处理程序已完成。真的很简单！请参阅 <a href="https://github.com/SergioBenitez/Rocket/tree/v0.4/examples/raw_upload">GitHub example</a> 的GitHub示例代码。</p>\n<h3 id="警告读取传入数据时应始终设置限制">警告：读取传入数据时应始终设置限制。<a class="anchor" href="Requests/Body-Data.html#警告读取传入数据时应始终设置限制">§</a></h3>\n<p>为了防止DoS攻击，您应该限制您愿意接受的数据量。<a href="https://doc.rust-lang.org/std/io/trait.Read.html#method.take"><code>take()</code></a>读卡器适配器使此操作变得简单：<code>data.open().take(LIMIT)</code>。</p>'
        } }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "index.js" })),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="Requests/Body-Data.html#正文数据">正文数据</a><ol><li><a href="Requests/Body-Data.html#表单">表单</a><ol></ol></li><li><a href="Requests/Body-Data.html#json">JSON</a><ol></ol></li><li><a href="Requests/Body-Data.html#警告读取传入数据时应始终设置限制">警告：读取传入数据时应始终设置限制。</a></li></ol></li></ol></nav>'
        } }),
    'layout': "default",
    'id': "Body-Data"
};
