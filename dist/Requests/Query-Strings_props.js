
export default {
    'sidebar': [{ "text": "Rocket编程指南", "link": "", "pagePath": "README.md" }, { "text": "简介", "children": [{ "text": "读者", "link": "Introduction/Audience.html", "pagePath": "Introduction/Audience.md" }, { "text": "前言", "link": "Introduction/Foreword.html", "pagePath": "Introduction/Foreword.md" }] }, { "text": "快速开始", "children": [{ "text": "运行示例", "link": "Quickstart/Running-Examples.html", "pagePath": "Quickstart/Running-Examples.md" }] }, { "text": "入门", "children": [{ "text": "安装 Rust", "link": "Getting-Started/Installing-Rust.html", "pagePath": "Getting-Started/Installing-Rust.md" }, { "text": "你好，世界！", "link": "Getting-Started/Hello-World.html", "pagePath": "Getting-Started/Hello-World.md" }] }, { "text": "概述", "children": [{ "text": "生命周期", "link": "Overview/Lifecycle.html", "pagePath": "Overview/Lifecycle.md" }, { "text": "路由", "link": "Overview/Routing.html", "pagePath": "Overview/Routing.md" }, { "text": "挂载", "link": "Overview/Mounting.html", "pagePath": "Overview/Mounting.md" }, { "text": "启动", "link": "Overview/Launching.html", "pagePath": "Overview/Launching.md" }] }, { "text": "请求 Requests", "children": [{ "text": "方法", "link": "Requests/Methods.html", "pagePath": "Requests/Methods.md" }, { "text": "动态路径", "link": "Requests/Dynamic-Paths.html", "pagePath": "Requests/Dynamic-Paths.md" }, { "text": "匹配转发", "link": "Requests/Forwarding.html", "pagePath": "Requests/Forwarding.md" }, { "text": "查询字符串", "link": "Requests/Query-Strings.html", "pagePath": "Requests/Query-Strings.md" }, { "text": "请求防护", "link": "Requests/Request-Guards.html", "pagePath": "Requests/Request-Guards.md" }, { "text": "Cookies", "link": "Requests/Cookies.html", "pagePath": "Requests/Cookies.md" }, { "text": "格式", "link": "Requests/Format.html", "pagePath": "Requests/Format.md" }, { "text": "正文数据", "link": "Requests/Body-Data.html", "pagePath": "Requests/Body-Data.md" }, { "text": "你好，世界！", "link": "Requests/Error-Catchers.html", "pagePath": "Requests/Error-Catchers.md" }] }, { "text": "响应 Responses", "children": [{ "text": "响应器", "link": "Responses/Responder.html", "pagePath": "Responses/Responder.md" }, { "text": "自定义响应器", "link": "Responses/Custom-Responders.html", "pagePath": "Responses/Custom-Responders.md" }, { "text": "实现响应器", "link": "Responses/Implementations.html", "pagePath": "Responses/Implementations.md" }, { "text": "Rocket响应器", "link": "Responses/Rocket-Responders.html", "pagePath": "Responses/Rocket-Responders.md" }, { "text": "模板", "link": "Responses/Templates.html", "pagePath": "Responses/Templates.md" }, { "text": "类型化Uri", "link": "Responses/Typed-URIs.html", "pagePath": "Responses/Typed-URIs.md" }] }, { "text": "状态 State", "children": [{ "text": "管理状态", "link": "State/Managed-State.html", "pagePath": "State/Managed-State.md" }, { "text": "请求本地状态", "link": "State/Request-Local-State.html", "pagePath": "State/Request-Local-State.md" }, { "text": "数据库", "link": "State/Databases.html", "pagePath": "State/Databases.md" }] }, { "text": "整流罩 Fairings", "children": [{ "text": "概述", "link": "Fairings/Overview.html", "pagePath": "Fairings/Overview.md" }, { "text": "实现", "link": "Fairings/Implementing.html", "pagePath": "Fairings/Implementing.md" }, { "text": "临时 Fairings", "link": "Fairings/Ad-Hoc-Fairings.html", "pagePath": "Fairings/Ad-Hoc-Fairings.md" }] }, { "text": "测试", "children": [{ "text": "本地调试", "link": "Testing/Local-Dispatching.html", "pagePath": "Testing/Local-Dispatching.md" }, { "text": "验证响应", "link": "Testing/Validating-Responses.html", "pagePath": "Testing/Validating-Responses.md" }, { "text": "测试 Hello World！", "link": "Testing/Testing-Hello-World.html", "pagePath": "Testing/Testing-Hello-World.md" }, { "text": "代码生成调试", "link": "Testing/Codegen-Debug.html", "pagePath": "Testing/Codegen-Debug.md" }] }, { "text": "配置", "children": [{ "text": "环境", "link": "Configuration/Environment.html", "pagePath": "Configuration/Environment.md" }, { "text": "Rocket配置文件", "link": "Configuration/Rocket.toml.html", "pagePath": "Configuration/Rocket.toml.md" }, { "text": "数据限制", "link": "Configuration/Data-Limits.html", "pagePath": "Configuration/Data-Limits.md" }, { "text": "附加功能", "link": "Configuration/Extras.html", "pagePath": "Configuration/Extras.md" }, { "text": "环境变量", "link": "Configuration/Environment-Variables.html", "pagePath": "Configuration/Environment-Variables.md" }, { "text": "程式化", "link": "Configuration/Programmatic.html", "pagePath": "Configuration/Programmatic.md" }, { "text": "配置TLS", "link": "Configuration/Configuring-TLS.html", "pagePath": "Configuration/Configuring-TLS.md" }] }, { "text": "Pastebin 教程", "children": [{ "text": "成品", "link": "Pastebin/Finished-Product.html", "pagePath": "Pastebin/Finished-Product.md" }, { "text": "入门", "link": "Pastebin/Getting-Started.html", "pagePath": "Pastebin/Getting-Started.md" }, { "text": "主页", "link": "Pastebin/Index.html", "pagePath": "Pastebin/Index.md" }, { "text": "上传", "link": "Pastebin/Uploading.html", "pagePath": "Pastebin/Uploading.md" }, { "text": "检索粘贴", "link": "Pastebin/Retrieving-Pastes.html", "pagePath": "Pastebin/Retrieving-Pastes.md" }, { "text": "总结", "link": "Pastebin/Conclusion.html", "pagePath": "Pastebin/Conclusion.md" }] }, { "text": "总结", "children": [{ "text": "获取帮助", "link": "Conclusion/Getting-Help.html", "pagePath": "Conclusion/Getting-Help.md" }, { "text": "下一步是什么？", "link": "Conclusion/Whats-Next.html", "pagePath": "Conclusion/Whats-Next.md" }] }],
    'prev': { "text": "匹配转发", "link": "Requests/Forwarding.html", "pagePath": "Requests/Forwarding.md" },
    'next': { "text": "请求防护", "link": "Requests/Request-Guards.html", "pagePath": "Requests/Request-Guards.md" },
    'config': { "srcDir": "source/_posts", "outDir": "dist", "exclude": ["**/.*", "markdoc.config.json", "LICENSE", "dist"], "baseDir": "/rocketdoc/", "watch": false, "serve": true, "addr": "127.0.0.1:8096", "title": "ROCKET指南", "nav": [{ "text": "首页", "link": "" }], "sidebar": ["README.md", { "text": "简介", "children": ["Introduction/Audience.md", "Introduction/Foreword.md"] }, { "text": "快速开始", "children": ["Quickstart/Running-Examples.md"] }, { "text": "入门", "children": ["Getting-Started/Installing-Rust.md", "Getting-Started/Hello-World.md"] }, { "text": "概述", "children": ["Overview/Lifecycle.md", "Overview/Routing.md", "Overview/Mounting.md", "Overview/Launching.md"] }, { "text": "请求 Requests", "children": ["Requests/Methods.md", "Requests/Dynamic-Paths.md", "Requests/Forwarding.md", "Requests/Query-Strings.md", "Requests/Request-Guards.md", "Requests/Cookies.md", "Requests/Format.md", "Requests/Body-Data.md", "Requests/Error-Catchers.md"] }, { "text": "响应 Responses", "children": ["Responses/Responder.md", "Responses/Custom-Responders.md", "Responses/Implementations.md", "Responses/Rocket-Responders.md", "Responses/Templates.md", "Responses/Typed-URIs.md"] }, { "text": "状态 State", "children": ["State/Managed-State.md", "State/Request-Local-State.md", "State/Databases.md"] }, { "text": "整流罩 Fairings", "children": ["Fairings/Overview.md", "Fairings/Implementing.md", "Fairings/Ad-Hoc-Fairings.md"] }, { "text": "测试", "children": ["Testing/Local-Dispatching.md", "Testing/Validating-Responses.md", "Testing/Testing-Hello-World.md", "Testing/Codegen-Debug.md"] }, { "text": "配置", "children": ["Configuration/Environment.md", "Configuration/Rocket.toml.md", "Configuration/Data-Limits.md", "Configuration/Extras.md", "Configuration/Environment-Variables.md", "Configuration/Programmatic.md", "Configuration/Configuring-TLS.md"] }, { "text": "Pastebin 教程", "children": ["Pastebin/Finished-Product.md", "Pastebin/Getting-Started.md", "Pastebin/Index.md", "Pastebin/Uploading.md", "Pastebin/Retrieving-Pastes.md", "Pastebin/Conclusion.md"] }, { "text": "总结", "children": ["Conclusion/Getting-Help.md", "Conclusion/Whats-Next.md"] }] },
    'pagePath': "Requests/Query-Strings.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "Requests/Query-Strings.html",
    'title': "查询字符串",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="查询字符串">查询字符串<a class="anchor" href="Requests/Query-Strings.html#查询字符串">§</a></h2>\n<p>可以使用与路径段几乎相同的方式将查询段声明为静态或动态：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/hello?wave&amp;&lt;name>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token operator">&amp;</span>RawStr<span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>\n    <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"Hello, {}!"</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>上面的<code>hello</code>路由匹配任何<code>GET</code>请求到<code>/hello</code>，该请求至少有一个<code>name</code>查询键和一个任意顺序的<code>wave</code>查询段，忽略任何额外的查询段。<code>name</code>查询参数的值用作<code>name</code>函数参数的值。例如，请求<code>/hello?wave&amp;name=John</code>会返回<code>Hello, John!</code>。其他可能导致相同结果的请求包括：</p>\n<ul>\n<li><code>/hello?name=John&amp;wave</code> (重新排序)</li>\n<li><code>/hello?name=John&amp;wave&amp;id=123</code> (附加段)</li>\n<li><code>/hello?id=123&amp;name=John&amp;wave</code> (重新排序, 附加段)</li>\n<li><code>/hello?name=Bob&amp;name=John&amp;wave</code> (最后一个值)</li>\n</ul>\n<p>允许任意数量的动态查询段。查询段可以是任何类型，包括您自己的类型，只要该类型实现了<a href="https://api.rocket.rs/v0.4/rocket/request/trait.FromFormValue.html"><code>FromFormValue</code></a>特征即可。</p>\n<h3 id="可选参数">可选参数<a class="anchor" href="Requests/Query-Strings.html#可选参数">§</a></h3>\n<p>允许缺少查询参数。只要请求的查询字符串包含路由查询字符串的所有静态组件，则请求将被路由到该路由。这允许使用可选参数，即使缺少参数也可以进行验证。</p>\n<p>为此，使用<code>Option&lt;T&gt;</code>作为参数类型。当请求中缺少查询参数时，将不提供任何参数作为值。使用<code>Option&lt;T&gt;</code>的路由如下所示：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/hello?wave&amp;&lt;name>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> Option<span class="token operator">&lt;</span><span class="token operator">&amp;</span>RawStr<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> String <span class="token punctuation">{</span>\n    name<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>name<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"Hi, {}!"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token string">"Hello!"</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>路径为<code>/hello</code>和<code>wave</code>查询段的任何<code>GET</code>请求都将路由到此路由。如果存在<code>name=value</code>查询段，则路由返回字符串“<code>Hi,value!</code>”。如果不存在<code>name</code>查询段，则路由返回“<code>Hello!</code>”。</p>\n<p>正如<code>Option&lt;T&gt;</code>类型的参数在查询中缺少参数时将具有值<code>None</code>一样，<code>bool</code>类型的参数在缺少参数时将具有值<code>false</code>。通过实现<a href="https://api.rocket.rs/v0.4/rocket/request/trait.FromFormValue.html#method.default"><code>FromFormValue::default()</code></a>，可以为实现<code>FromFormValue</code>的自己的类型自定义缺少参数的默认值。</p>\n<h3 id="多段参数">多段参数<a class="anchor" href="Requests/Query-Strings.html#多段参数">§</a></h3>\n<p>与路径一样，仍然可以使用<code>&lt;param..&gt;</code>匹配查询中的多个参数段。此类参数的类型（称为查询保护）必须实现<code>FromQuery</code>特性。查询保护必须是查询的最终组件：查询参数之后的任何文本都将导致编译时错误。</p>\n<p>查询保护将验证所有其他不匹配的查询段（通过静态或动态查询参数）。虽然您可以自己实现<code>FromQuery</code>，但大多数用例将通过使用<code>Form</code>或<code>LenientForm</code>查询保护来处理。表单部分详细说明了如何使用这些类型。简而言之，这些类型允许您使用具有命名字段的结构自动验证查询/表单参数：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">use</span> rocket<span class="token punctuation">::</span>request<span class="token punctuation">::</span>Form<span class="token punctuation">;</span>\n\n<span class="token attribute attr-name">#[derive(FromForm)]</span>\n<span class="token keyword">struct</span> User <span class="token punctuation">{</span>\n    name<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n    account<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token attribute attr-name">#[get(<span class="token string">"/item?&lt;id>&amp;&lt;user..>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">item</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> Form<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n</code></pre>\n<p>对请求 <code>/item?id=100&amp;name=sandal&amp;account=400</code>，上面的 <code>item</code> 路由将<code>id</code>设置为<code>100</code>，<code>user</code>设置为<code>User { name: &quot;sandal&quot;, account: 400 }</code>。若要捕获无法验证的表单，请使用<code>Option</code> 或 <code>Result</code> 类型：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/item?&lt;id>&amp;&lt;user..>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">item</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> Option<span class="token operator">&lt;</span>Form<span class="token operator">&lt;</span>User<span class="token operator">>></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n</code></pre>\n<p>有关更多查询处理示例，请参见<a href="https://github.com/SergioBenitez/Rocket/tree/v0.4/examples/query_params"><code>query_params</code> 示例</a>。</p>'
        } }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "index.js" })),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="Requests/Query-Strings.html#查询字符串">查询字符串</a><ol><li><a href="Requests/Query-Strings.html#可选参数">可选参数</a></li><li><a href="Requests/Query-Strings.html#多段参数">多段参数</a></li></ol></li></ol></nav>'
        } }),
    'layout': "default",
    'id': "Query-Strings"
};
