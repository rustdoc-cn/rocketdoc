
export default {
    'sidebar': [{ "text": "Rocket编程指南", "link": "", "pagePath": "README.md" }, { "text": "简介", "children": [{ "text": "读者", "link": "Introduction/Audience.html", "pagePath": "Introduction/Audience.md" }, { "text": "前言", "link": "Introduction/Foreword.html", "pagePath": "Introduction/Foreword.md" }] }, { "text": "快速开始", "children": [{ "text": "运行示例", "link": "Quickstart/Running-Examples.html", "pagePath": "Quickstart/Running-Examples.md" }] }, { "text": "入门", "children": [{ "text": "安装 Rust", "link": "Getting-Started/Installing-Rust.html", "pagePath": "Getting-Started/Installing-Rust.md" }, { "text": "你好，世界！", "link": "Getting-Started/Hello-World.html", "pagePath": "Getting-Started/Hello-World.md" }] }, { "text": "概述", "children": [{ "text": "生命周期", "link": "Overview/Lifecycle.html", "pagePath": "Overview/Lifecycle.md" }, { "text": "路由", "link": "Overview/Routing.html", "pagePath": "Overview/Routing.md" }, { "text": "挂载", "link": "Overview/Mounting.html", "pagePath": "Overview/Mounting.md" }, { "text": "启动", "link": "Overview/Launching.html", "pagePath": "Overview/Launching.md" }] }, { "text": "请求 Requests", "children": [{ "text": "方法", "link": "Requests/Methods.html", "pagePath": "Requests/Methods.md" }, { "text": "动态路径", "link": "Requests/Dynamic-Paths.html", "pagePath": "Requests/Dynamic-Paths.md" }, { "text": "匹配转发", "link": "Requests/Forwarding.html", "pagePath": "Requests/Forwarding.md" }, { "text": "查询字符串", "link": "Requests/Query-Strings.html", "pagePath": "Requests/Query-Strings.md" }, { "text": "请求防护", "link": "Requests/Request-Guards.html", "pagePath": "Requests/Request-Guards.md" }, { "text": "Cookies", "link": "Requests/Cookies.html", "pagePath": "Requests/Cookies.md" }, { "text": "格式", "link": "Requests/Format.html", "pagePath": "Requests/Format.md" }, { "text": "正文数据", "link": "Requests/Body-Data.html", "pagePath": "Requests/Body-Data.md" }, { "text": "你好，世界！", "link": "Requests/Error-Catchers.html", "pagePath": "Requests/Error-Catchers.md" }] }, { "text": "响应 Responses", "children": [{ "text": "响应器", "link": "Responses/Responder.html", "pagePath": "Responses/Responder.md" }, { "text": "自定义响应器", "link": "Responses/Custom-Responders.html", "pagePath": "Responses/Custom-Responders.md" }, { "text": "实现响应器", "link": "Responses/Implementations.html", "pagePath": "Responses/Implementations.md" }, { "text": "Rocket响应器", "link": "Responses/Rocket-Responders.html", "pagePath": "Responses/Rocket-Responders.md" }, { "text": "模板", "link": "Responses/Templates.html", "pagePath": "Responses/Templates.md" }, { "text": "类型化Uri", "link": "Responses/Typed-URIs.html", "pagePath": "Responses/Typed-URIs.md" }] }, { "text": "状态 State", "children": [{ "text": "管理状态", "link": "State/Managed-State.html", "pagePath": "State/Managed-State.md" }, { "text": "请求本地状态", "link": "State/Request-Local-State.html", "pagePath": "State/Request-Local-State.md" }, { "text": "数据库", "link": "State/Databases.html", "pagePath": "State/Databases.md" }] }, { "text": "整流罩 Fairings", "children": [{ "text": "概述", "link": "Fairings/Overview.html", "pagePath": "Fairings/Overview.md" }, { "text": "实现", "link": "Fairings/Implementing.html", "pagePath": "Fairings/Implementing.md" }, { "text": "临时 Fairings", "link": "Fairings/Ad-Hoc-Fairings.html", "pagePath": "Fairings/Ad-Hoc-Fairings.md" }] }, { "text": "测试", "children": [{ "text": "本地调试", "link": "Testing/Local-Dispatching.html", "pagePath": "Testing/Local-Dispatching.md" }, { "text": "验证响应", "link": "Testing/Validating-Responses.html", "pagePath": "Testing/Validating-Responses.md" }, { "text": "测试 Hello World！", "link": "Testing/Testing-Hello-World.html", "pagePath": "Testing/Testing-Hello-World.md" }, { "text": "代码生成调试", "link": "Testing/Codegen-Debug.html", "pagePath": "Testing/Codegen-Debug.md" }] }, { "text": "配置", "children": [{ "text": "环境", "link": "Configuration/Environment.html", "pagePath": "Configuration/Environment.md" }, { "text": "Rocket配置文件", "link": "Configuration/Rocket.toml.html", "pagePath": "Configuration/Rocket.toml.md" }, { "text": "数据限制", "link": "Configuration/Data-Limits.html", "pagePath": "Configuration/Data-Limits.md" }, { "text": "附加功能", "link": "Configuration/Extras.html", "pagePath": "Configuration/Extras.md" }, { "text": "环境变量", "link": "Configuration/Environment-Variables.html", "pagePath": "Configuration/Environment-Variables.md" }, { "text": "程式化", "link": "Configuration/Programmatic.html", "pagePath": "Configuration/Programmatic.md" }, { "text": "配置TLS", "link": "Configuration/Configuring-TLS.html", "pagePath": "Configuration/Configuring-TLS.md" }] }, { "text": "Pastebin 教程", "children": [{ "text": "成品", "link": "Pastebin/Finished-Product.html", "pagePath": "Pastebin/Finished-Product.md" }, { "text": "入门", "link": "Pastebin/Getting-Started.html", "pagePath": "Pastebin/Getting-Started.md" }, { "text": "主页", "link": "Pastebin/Index.html", "pagePath": "Pastebin/Index.md" }, { "text": "上传", "link": "Pastebin/Uploading.html", "pagePath": "Pastebin/Uploading.md" }, { "text": "检索粘贴", "link": "Pastebin/Retrieving-Pastes.html", "pagePath": "Pastebin/Retrieving-Pastes.md" }, { "text": "总结", "link": "Pastebin/Conclusion.html", "pagePath": "Pastebin/Conclusion.md" }] }, { "text": "总结", "children": [{ "text": "获取帮助", "link": "Conclusion/Getting-Help.html", "pagePath": "Conclusion/Getting-Help.md" }, { "text": "下一步是什么？", "link": "Conclusion/Whats-Next.html", "pagePath": "Conclusion/Whats-Next.md" }] }],
    'prev': { "text": "概述", "link": "Fairings/Overview.html", "pagePath": "Fairings/Overview.md" },
    'next': { "text": "临时 Fairings", "link": "Fairings/Ad-Hoc-Fairings.html", "pagePath": "Fairings/Ad-Hoc-Fairings.md" },
    'config': { "srcDir": "source/_posts", "outDir": "dist", "exclude": ["**/.*", "markdoc.config.json", "LICENSE", "dist"], "baseDir": "/rocketdoc/", "watch": false, "serve": true, "addr": "127.0.0.1:8096", "title": "ROCKET指南", "nav": [{ "text": "首页", "link": "" }], "sidebar": ["README.md", { "text": "简介", "children": ["Introduction/Audience.md", "Introduction/Foreword.md"] }, { "text": "快速开始", "children": ["Quickstart/Running-Examples.md"] }, { "text": "入门", "children": ["Getting-Started/Installing-Rust.md", "Getting-Started/Hello-World.md"] }, { "text": "概述", "children": ["Overview/Lifecycle.md", "Overview/Routing.md", "Overview/Mounting.md", "Overview/Launching.md"] }, { "text": "请求 Requests", "children": ["Requests/Methods.md", "Requests/Dynamic-Paths.md", "Requests/Forwarding.md", "Requests/Query-Strings.md", "Requests/Request-Guards.md", "Requests/Cookies.md", "Requests/Format.md", "Requests/Body-Data.md", "Requests/Error-Catchers.md"] }, { "text": "响应 Responses", "children": ["Responses/Responder.md", "Responses/Custom-Responders.md", "Responses/Implementations.md", "Responses/Rocket-Responders.md", "Responses/Templates.md", "Responses/Typed-URIs.md"] }, { "text": "状态 State", "children": ["State/Managed-State.md", "State/Request-Local-State.md", "State/Databases.md"] }, { "text": "整流罩 Fairings", "children": ["Fairings/Overview.md", "Fairings/Implementing.md", "Fairings/Ad-Hoc-Fairings.md"] }, { "text": "测试", "children": ["Testing/Local-Dispatching.md", "Testing/Validating-Responses.md", "Testing/Testing-Hello-World.md", "Testing/Codegen-Debug.md"] }, { "text": "配置", "children": ["Configuration/Environment.md", "Configuration/Rocket.toml.md", "Configuration/Data-Limits.md", "Configuration/Extras.md", "Configuration/Environment-Variables.md", "Configuration/Programmatic.md", "Configuration/Configuring-TLS.md"] }, { "text": "Pastebin 教程", "children": ["Pastebin/Finished-Product.md", "Pastebin/Getting-Started.md", "Pastebin/Index.md", "Pastebin/Uploading.md", "Pastebin/Retrieving-Pastes.md", "Pastebin/Conclusion.md"] }, { "text": "总结", "children": ["Conclusion/Getting-Help.md", "Conclusion/Whats-Next.md"] }] },
    'pagePath': "Fairings/Implementing.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "Fairings/Implementing.html",
    'title': "实现",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="实现">实现<a class="anchor" href="Fairings/Implementing.html#实现">§</a></h2>\n<p>回想一下，整流罩是实现<a href="https://api.rocket.rs/v0.4/rocket/fairing/trait.Fairing.html"><code>Fairing</code></a>特征的任何类型。一个<code>Fairing</code>实现有一个必需的方法：<a href="https://api.rocket.rs/v0.4/rocket/fairing/trait.Fairing.html#tymethod.info"><code>info</code></a>，它返回一个<a href="https://api.rocket.rs/v0.4/rocket/fairing/trait.Fairing.html#tymethod.info"><code>Info</code></a>结构。Rocket使用此结构为整流罩分配名称，并确定整流罩正在注册的回调集。一个<code>Fairing</code>可以实现任何可用的回调：<a href="https://api.rocket.rs/v0.4/rocket/fairing/trait.Fairing.html#method.on_attach"><code>on_attach</code></a>，<a href="https://api.rocket.rs/v0.4/rocket/fairing/trait.Fairing.html#method.on_launch"><code>on_launch</code></a>，<a href="https://api.rocket.rs/v0.4/rocket/fairing/trait.Fairing.html#method.on_request"><code>on_request</code></a>，和<a href="https://api.rocket.rs/v0.4/rocket/fairing/trait.Fairing.html#method.on_response"><code>on_response</code></a>。每个回调都有一个默认的实现，该实现完全不执行任何操作。</p>\n<h4 id="要求">要求<a class="anchor" href="Fairings/Implementing.html#要求">§</a></h4>\n<p><code>Fairing</code>必须实现一个类型<code>Send + Sync + \'static</code>。这意味着整流罩必须可跨线程边界（<code>Send</code>），线程安全（<code>Sync</code>）发送，并且只有静态引用（如果有）（<code>\'static</code>）。请注意，这些界限<em>并不</em>禁止<code>Fairing</code>保持状态：状态仅需要是线程安全的且可静态使用或分配堆。</p>\n<h4 id="例子">例子<a class="anchor" href="Fairings/Implementing.html#例子">§</a></h4>\n<p>想象一下，我们要记录应用程序已收到的数量<code>GET</code>和<code>POST</code>请求。虽然我们可以做到这一点与要求警卫和管理状态，它需要我们每一个注释<code>GET</code>，并<code>POST</code>用自定义类型要求，污染处理程序签名。相反，我们可以创建一个在全球范围内起作用的简单整流罩。</p>\n<p><code>Counter</code>下面的整流罩代码正是实现了这一点。整流罩接收到请求的回调，在那里它增加在每个计数器<code>GET</code>和<code>POST</code>请求。它还接收一个响应回调，在该回调中，它<code>/counts</code>通过返回记录的计数数来响应未路由的请求。</p>\n<pre class="language-rust"><code class="language-rust"><span class="token keyword">struct</span> Counter <span class="token punctuation">{</span>\n    get<span class="token punctuation">:</span> AtomicUsize<span class="token punctuation">,</span>\n    post<span class="token punctuation">:</span> AtomicUsize<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">impl</span> Fairing <span class="token keyword">for</span> Counter <span class="token punctuation">{</span>\n    <span class="token comment">// This is a request and response fairing named "GET/POST Counter".</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">info</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Info <span class="token punctuation">{</span>\n        Info <span class="token punctuation">{</span>\n            name<span class="token punctuation">:</span> <span class="token string">"GET/POST Counter"</span><span class="token punctuation">,</span>\n            kind<span class="token punctuation">:</span> Kind<span class="token punctuation">::</span>Request <span class="token operator">|</span> Kind<span class="token punctuation">::</span>Response\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Increment the counter for `GET` and `POST` requests.</span>\n    <span class="token keyword">fn</span> <span class="token function-definition function">on_request</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> request<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> Request<span class="token punctuation">,</span> _<span class="token punctuation">:</span> <span class="token operator">&amp;</span>Data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">match</span> request<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            Method<span class="token punctuation">::</span>Get <span class="token operator">=></span> <span class="token keyword">self</span><span class="token punctuation">.</span>get<span class="token punctuation">.</span><span class="token function">fetch_add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Ordering<span class="token punctuation">::</span>Relaxed<span class="token punctuation">)</span><span class="token punctuation">,</span>\n            Method<span class="token punctuation">::</span>Post <span class="token operator">=></span> <span class="token keyword">self</span><span class="token punctuation">.</span>post<span class="token punctuation">.</span><span class="token function">fetch_add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Ordering<span class="token punctuation">::</span>Relaxed<span class="token punctuation">)</span><span class="token punctuation">,</span>\n            _ <span class="token operator">=></span> <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">fn</span> <span class="token function-definition function">on_response</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> request<span class="token punctuation">:</span> <span class="token operator">&amp;</span>Request<span class="token punctuation">,</span> response<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Don\'t change a successful user\'s response, ever.</span>\n        <span class="token keyword">if</span> response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Status<span class="token punctuation">::</span>NotFound <span class="token punctuation">{</span>\n            <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// Rewrite the response to return the current counts.</span>\n        <span class="token keyword">if</span> request<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Method<span class="token punctuation">::</span>Get <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"/counts"</span> <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> get_count <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>get<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">::</span>Relaxed<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> post_count <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>post<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>Ordering<span class="token punctuation">::</span>Relaxed<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"Get: {}\nPost: {}"</span><span class="token punctuation">,</span> get_count<span class="token punctuation">,</span> post_count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            response<span class="token punctuation">.</span><span class="token function">set_status</span><span class="token punctuation">(</span>Status<span class="token punctuation">::</span>Ok<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            response<span class="token punctuation">.</span><span class="token function">set_header</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">::</span>Plain<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            response<span class="token punctuation">.</span><span class="token function">set_sized_body</span><span class="token punctuation">(</span>Cursor<span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>'
        } }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "index.js" })),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="Fairings/Implementing.html#实现">实现</a><ol></ol></li></ol></nav>'
        } }),
    'layout': "default",
    'id': "Implementing"
};
