
export default {
    'sidebar': [{ "text": "Rocket编程指南", "link": "", "pagePath": "README.md" }, { "text": "简介", "children": [{ "text": "读者", "link": "Introduction/Audience.html", "pagePath": "Introduction/Audience.md" }, { "text": "前言", "link": "Introduction/Foreword.html", "pagePath": "Introduction/Foreword.md" }] }, { "text": "快速开始", "children": [{ "text": "运行示例", "link": "Quickstart/Running-Examples.html", "pagePath": "Quickstart/Running-Examples.md" }] }, { "text": "入门", "children": [{ "text": "安装 Rust", "link": "Getting-Started/Installing-Rust.html", "pagePath": "Getting-Started/Installing-Rust.md" }, { "text": "你好，世界！", "link": "Getting-Started/Hello-World.html", "pagePath": "Getting-Started/Hello-World.md" }] }, { "text": "概述", "children": [{ "text": "生命周期", "link": "Overview/Lifecycle.html", "pagePath": "Overview/Lifecycle.md" }, { "text": "路由", "link": "Overview/Routing.html", "pagePath": "Overview/Routing.md" }, { "text": "挂载", "link": "Overview/Mounting.html", "pagePath": "Overview/Mounting.md" }, { "text": "启动", "link": "Overview/Launching.html", "pagePath": "Overview/Launching.md" }] }, { "text": "请求 Requests", "children": [{ "text": "方法", "link": "Requests/Methods.html", "pagePath": "Requests/Methods.md" }, { "text": "动态路径", "link": "Requests/Dynamic-Paths.html", "pagePath": "Requests/Dynamic-Paths.md" }, { "text": "匹配转发", "link": "Requests/Forwarding.html", "pagePath": "Requests/Forwarding.md" }, { "text": "查询字符串", "link": "Requests/Query-Strings.html", "pagePath": "Requests/Query-Strings.md" }, { "text": "请求防护", "link": "Requests/Request-Guards.html", "pagePath": "Requests/Request-Guards.md" }, { "text": "Cookies", "link": "Requests/Cookies.html", "pagePath": "Requests/Cookies.md" }, { "text": "格式", "link": "Requests/Format.html", "pagePath": "Requests/Format.md" }, { "text": "正文数据", "link": "Requests/Body-Data.html", "pagePath": "Requests/Body-Data.md" }, { "text": "你好，世界！", "link": "Requests/Error-Catchers.html", "pagePath": "Requests/Error-Catchers.md" }] }, { "text": "响应 Responses", "children": [{ "text": "响应器", "link": "Responses/Responder.html", "pagePath": "Responses/Responder.md" }, { "text": "自定义响应器", "link": "Responses/Custom-Responders.html", "pagePath": "Responses/Custom-Responders.md" }, { "text": "实现响应器", "link": "Responses/Implementations.html", "pagePath": "Responses/Implementations.md" }, { "text": "Rocket响应器", "link": "Responses/Rocket-Responders.html", "pagePath": "Responses/Rocket-Responders.md" }, { "text": "模板", "link": "Responses/Templates.html", "pagePath": "Responses/Templates.md" }, { "text": "类型化Uri", "link": "Responses/Typed-URIs.html", "pagePath": "Responses/Typed-URIs.md" }] }, { "text": "状态 State", "children": [{ "text": "管理状态", "link": "State/Managed-State.html", "pagePath": "State/Managed-State.md" }, { "text": "请求本地状态", "link": "State/Request-Local-State.html", "pagePath": "State/Request-Local-State.md" }, { "text": "数据库", "link": "State/Databases.html", "pagePath": "State/Databases.md" }] }, { "text": "整流罩 Fairings", "children": [{ "text": "概述", "link": "Fairings/Overview.html", "pagePath": "Fairings/Overview.md" }, { "text": "实现", "link": "Fairings/Implementing.html", "pagePath": "Fairings/Implementing.md" }, { "text": "临时 Fairings", "link": "Fairings/Ad-Hoc-Fairings.html", "pagePath": "Fairings/Ad-Hoc-Fairings.md" }] }, { "text": "测试", "children": [{ "text": "本地调试", "link": "Testing/Local-Dispatching.html", "pagePath": "Testing/Local-Dispatching.md" }, { "text": "验证响应", "link": "Testing/Validating-Responses.html", "pagePath": "Testing/Validating-Responses.md" }, { "text": "测试 Hello World！", "link": "Testing/Testing-Hello-World.html", "pagePath": "Testing/Testing-Hello-World.md" }, { "text": "代码生成调试", "link": "Testing/Codegen-Debug.html", "pagePath": "Testing/Codegen-Debug.md" }] }, { "text": "配置", "children": [{ "text": "环境", "link": "Configuration/Environment.html", "pagePath": "Configuration/Environment.md" }, { "text": "Rocket配置文件", "link": "Configuration/Rocket.toml.html", "pagePath": "Configuration/Rocket.toml.md" }, { "text": "数据限制", "link": "Configuration/Data-Limits.html", "pagePath": "Configuration/Data-Limits.md" }, { "text": "附加功能", "link": "Configuration/Extras.html", "pagePath": "Configuration/Extras.md" }, { "text": "环境变量", "link": "Configuration/Environment-Variables.html", "pagePath": "Configuration/Environment-Variables.md" }, { "text": "程式化", "link": "Configuration/Programmatic.html", "pagePath": "Configuration/Programmatic.md" }, { "text": "配置TLS", "link": "Configuration/Configuring-TLS.html", "pagePath": "Configuration/Configuring-TLS.md" }] }, { "text": "Pastebin 教程", "children": [{ "text": "成品", "link": "Pastebin/Finished-Product.html", "pagePath": "Pastebin/Finished-Product.md" }, { "text": "入门", "link": "Pastebin/Getting-Started.html", "pagePath": "Pastebin/Getting-Started.md" }, { "text": "主页", "link": "Pastebin/Index.html", "pagePath": "Pastebin/Index.md" }, { "text": "上传", "link": "Pastebin/Uploading.html", "pagePath": "Pastebin/Uploading.md" }, { "text": "检索粘贴", "link": "Pastebin/Retrieving-Pastes.html", "pagePath": "Pastebin/Retrieving-Pastes.md" }, { "text": "总结", "link": "Pastebin/Conclusion.html", "pagePath": "Pastebin/Conclusion.md" }] }, { "text": "总结", "children": [{ "text": "获取帮助", "link": "Conclusion/Getting-Help.html", "pagePath": "Conclusion/Getting-Help.md" }, { "text": "下一步是什么？", "link": "Conclusion/Whats-Next.html", "pagePath": "Conclusion/Whats-Next.md" }] }],
    'prev': { "text": "请求本地状态", "link": "State/Request-Local-State.html", "pagePath": "State/Request-Local-State.md" },
    'next': { "text": "概述", "link": "Fairings/Overview.html", "pagePath": "Fairings/Overview.md" },
    'config': { "srcDir": "source/_posts", "outDir": "dist", "exclude": ["**/.*", "markdoc.config.json", "LICENSE", "dist"], "baseDir": "/rocketdoc/", "watch": false, "serve": true, "addr": "127.0.0.1:8096", "title": "ROCKET指南", "nav": [{ "text": "首页", "link": "" }], "sidebar": ["README.md", { "text": "简介", "children": ["Introduction/Audience.md", "Introduction/Foreword.md"] }, { "text": "快速开始", "children": ["Quickstart/Running-Examples.md"] }, { "text": "入门", "children": ["Getting-Started/Installing-Rust.md", "Getting-Started/Hello-World.md"] }, { "text": "概述", "children": ["Overview/Lifecycle.md", "Overview/Routing.md", "Overview/Mounting.md", "Overview/Launching.md"] }, { "text": "请求 Requests", "children": ["Requests/Methods.md", "Requests/Dynamic-Paths.md", "Requests/Forwarding.md", "Requests/Query-Strings.md", "Requests/Request-Guards.md", "Requests/Cookies.md", "Requests/Format.md", "Requests/Body-Data.md", "Requests/Error-Catchers.md"] }, { "text": "响应 Responses", "children": ["Responses/Responder.md", "Responses/Custom-Responders.md", "Responses/Implementations.md", "Responses/Rocket-Responders.md", "Responses/Templates.md", "Responses/Typed-URIs.md"] }, { "text": "状态 State", "children": ["State/Managed-State.md", "State/Request-Local-State.md", "State/Databases.md"] }, { "text": "整流罩 Fairings", "children": ["Fairings/Overview.md", "Fairings/Implementing.md", "Fairings/Ad-Hoc-Fairings.md"] }, { "text": "测试", "children": ["Testing/Local-Dispatching.md", "Testing/Validating-Responses.md", "Testing/Testing-Hello-World.md", "Testing/Codegen-Debug.md"] }, { "text": "配置", "children": ["Configuration/Environment.md", "Configuration/Rocket.toml.md", "Configuration/Data-Limits.md", "Configuration/Extras.md", "Configuration/Environment-Variables.md", "Configuration/Programmatic.md", "Configuration/Configuring-TLS.md"] }, { "text": "Pastebin 教程", "children": ["Pastebin/Finished-Product.md", "Pastebin/Getting-Started.md", "Pastebin/Index.md", "Pastebin/Uploading.md", "Pastebin/Retrieving-Pastes.md", "Pastebin/Conclusion.md"] }, { "text": "总结", "children": ["Conclusion/Getting-Help.md", "Conclusion/Whats-Next.md"] }] },
    'pagePath': "State/Databases.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "State/Databases.html",
    'title': "数据库",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="数据库">数据库<a class="anchor" href="State/Databases.html#数据库">§</a></h2>\n<p>Rocket包含与数据库无关的内置ORM支持。特别是，Rocket提供了一个过程宏，使您可以轻松地通过连接池将Rocket应用程序连接到数据库。<em>数据库连接池</em>是一个数据结构，保持在应用程序以后使用活动的数据库连接。连接池支持的此实现基于<a href="https://crates.io/crates/r2d2"><code>r2d2</code></a>请求防护并通过请求防护公开连接。数据库是通过Rocket的常规配置机制分别配置的：<code>Rocket.toml</code>文件，环境变量或过程。</p>\n<p>使用此库将Rocket应用程序连接到数据库只需三个简单步骤：</p>\n<ol>\n<li>在中配置数据库<code>Rocket.toml</code>。</li>\n<li>将请求防护类型和整流罩与每个数据库相关联。</li>\n<li>使用请求防护在处理程序中检索连接。</li>\n</ol>\n<p>目前，Rocket提供了对以下数据库的内置支持：</p>\n<table>\n<thead>\n<tr>\n<th>种类Kind</th>\n<th>驱动程序Driver</th>\n<th>Version</th>\n<th><code>Poolable</code> Type</th>\n<th>功能Feature</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MySQL</td>\n<td><a href="https://diesel.rs/">Diesel</a></td>\n<td><code>1</code></td>\n<td><a href="http://docs.diesel.rs/diesel/mysql/struct.MysqlConnection.html"><code>diesel::MysqlConnection</code></a></td>\n<td><code>diesel_mysql_pool</code></td>\n</tr>\n<tr>\n<td>MySQL</td>\n<td><a href="https://github.com/blackbeam/rust-mysql-simple"><code>rust-mysql-simple</code></a></td>\n<td><code>16</code></td>\n<td><a href="https://docs.rs/mysql/14.0.0/mysql/struct.Conn.html"><code>mysql::conn</code></a></td>\n<td><code>mysql_pool</code></td>\n</tr>\n<tr>\n<td>Postgres</td>\n<td><a href="https://diesel.rs/">Diesel</a></td>\n<td><code>1</code></td>\n<td><a href="http://docs.diesel.rs/diesel/pg/struct.PgConnection.html"><code>diesel::PgConnection</code></a></td>\n<td><code>diesel_postgres_pool</code></td>\n</tr>\n<tr>\n<td>Postgres</td>\n<td><a href="https://github.com/sfackler/rust-postgres">Rust-Postgres</a></td>\n<td><code>0.15</code></td>\n<td><a href="https://docs.rs/postgres/0.15.2/postgres/struct.Connection.html"><code>postgres::Connection</code></a></td>\n<td><code>postgres_pool</code></td>\n</tr>\n<tr>\n<td>Sqlite</td>\n<td><a href="https://diesel.rs/">Diesel</a></td>\n<td><code>1</code></td>\n<td><a href="http://docs.diesel.rs/diesel/prelude/struct.SqliteConnection.html"><code>diesel::SqliteConnection</code></a></td>\n<td><code>diesel_sqlite_pool</code></td>\n</tr>\n<tr>\n<td>Sqlite</td>\n<td><a href="https://github.com/jgallagher/rusqlite"><code>Rustqlite</code></a></td>\n<td><code>0.16</code></td>\n<td><a href="https://docs.rs/rusqlite/0.14.0/rusqlite/struct.Connection.html"><code>rusqlite::Connection</code></a></td>\n<td><code>sqlite_pool</code></td>\n</tr>\n<tr>\n<td>Neo4j</td>\n<td><a href="https://github.com/livioribeiro/rusted-cypher"><code>rusted_cypher</code></a></td>\n<td><code>1</code></td>\n<td><a href="https://docs.rs/rusted_cypher/1.1.0/rusted_cypher/graph/struct.GraphClient.html"><code>rusted_cypher::GraphClient</code></a></td>\n<td><code>cypher_pool</code></td>\n</tr>\n<tr>\n<td>Redis</td>\n<td><a href="https://github.com/mitsuhiko/redis-rs"><code>redis-rs</code></a></td>\n<td><code>0.10</code></td>\n<td><a href="https://docs.rs/redis/0.9.0/redis/struct.Connection.html"><code>redis::Connection</code></a></td>\n<td><code>redis_pool</code></td>\n</tr>\n<tr>\n<td>MongoDB</td>\n<td><a href="https://github.com/mongodb-labs/mongo-rust-driver-prototype"><code>mongodb</code></a></td>\n<td><code>0.3.12</code></td>\n<td><a href="https://docs.rs/mongodb/0.3.12/mongodb/db/type.Database.html"><code>mongodb::db::Database</code></a></td>\n<td><code>mongodb_pool</code></td>\n</tr>\n<tr>\n<td>Memcache</td>\n<td><a href="https://github.com/aisk/rust-memcache"><code>memcache</code></a></td>\n<td><code>0.11</code></td>\n<td><a href="https://docs.rs/memcache/0.11.0/memcache/struct.Client.html"><code>memcache::Client</code></a></td>\n<td><code>memcache_pool</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id="用法">用法<a class="anchor" href="State/Databases.html#用法">§</a></h3>\n<p>要将您的Rocket应用程序连接到给定的数据库，请首先在与您的环境相匹配的表中标识“种类”和“驱动程序”。必须启用与您的数据库类型相对应的功能。这是在“功能”列中标识的功能。例如，对于Diesel-based SQLite 数据库，您应该输入<code>Cargo.toml</code>：</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token punctuation">[</span>dependencies<span class="token punctuation">.</span>rocket_contrib<span class="token punctuation">]</span>\nversion <span class="token operator">=</span> <span class="token string">"0.4.2"</span>\n<span class="token keyword">default</span><span class="token operator">-</span>features <span class="token operator">=</span> <span class="token boolean">false</span>\nfeatures <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"diesel_sqlite_pool"</span><span class="token punctuation">]</span>\n</code></pre>\n<p>然后，在<code>Rocket.toml</code>环境变量中（或等效于环境变量），在<code>databases</code>表中配置数据库的URL ：</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token punctuation">[</span><span class="token keyword">global</span><span class="token punctuation">.</span>databases<span class="token punctuation">]</span>\nsqlite_logs <span class="token operator">=</span> { url <span class="token operator">=</span> <span class="token string">"/path/to/database.sqlite"</span> }\n</code></pre>\n<p>在应用程序的源代码中，创建一个具有一个内部类型的类似单元的结构。此类型应为“<code>Poolable</code>类型”列中列出的类型。然后用 <code>#[database]</code>属性装饰类型，提供在上一步中配置为唯一参数的数据库的名称。最后，附加 <code>YourType::fairing()</code>返回的整流罩，该整流罩由<code>#[database]</code>属性生成：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[macro_use]</span> <span class="token keyword">extern</span> <span class="token keyword">crate</span> rocket_contrib<span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> rocket_contrib<span class="token punctuation">::</span>databases<span class="token punctuation">::</span>diesel<span class="token punctuation">;</span>\n\n<span class="token attribute attr-name">#[database(<span class="token string">"sqlite_logs"</span>)]</span>\n<span class="token keyword">struct</span> LogsDbConn<span class="token punctuation">(</span>diesel<span class="token punctuation">::</span>SqliteConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    rocket<span class="token punctuation">::</span><span class="token function">ignite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n       <span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>LogsDbConn<span class="token punctuation">::</span><span class="token function">fairing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n       <span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>就这样！每当需要连接到数据库时，请使用您的类型作为请求保护：</p>\n<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[get(<span class="token string">"/logs/&lt;id>"</span>)]</span>\n<span class="token keyword">fn</span> <span class="token function-definition function">get_logs</span><span class="token punctuation">(</span>conn<span class="token punctuation">:</span> LogsDbConn<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> Result<span class="token operator">&lt;</span>Logs<span class="token operator">></span> <span class="token punctuation">{</span>\n    logs<span class="token punctuation">::</span><span class="token function">filter</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>log_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token operator">*</span>conn<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>如果应用程序使用默认情况下不可用的数据库引擎功能，例如支持<code>chrono</code>或<code>uuid</code>，则可以通过在<code>Cargo.toml</code>中添加这些功能来启用这些功能，如下所示：</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token punctuation">[</span>dependencies<span class="token punctuation">]</span>\npostgres <span class="token operator">=</span> { version <span class="token operator">=</span> <span class="token string">"0.15"</span><span class="token punctuation">,</span> features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"with-chrono"</span><span class="token punctuation">]</span> }\n</code></pre>\n<p>有关Rocket内置数据库支持的更多信息，请参阅<a href="https://api.rocket.rs/v0.4/rocket_contrib/databases/index.html"><code>rocket_contrib::databases</code></a>模块文档。</p>'
        } }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "index.js" })),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="State/Databases.html#数据库">数据库</a><ol><li><a href="State/Databases.html#用法">用法</a></li></ol></li></ol></nav>'
        } }),
    'layout': "default",
    'id': "Databases"
};
